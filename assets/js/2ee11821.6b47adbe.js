"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[8332],{8395:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>d,contentTitle:()=>s,default:()=>o,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var r=t(5893),n=t(1151);const l={sidebar_position:1},s="Gang of Four",c={id:"design-pattern-principle/gof",title:"Gang of Four",description:"Refactoring Guru",source:"@site/docs/design-pattern-principle/gof.mdx",sourceDirName:"design-pattern-principle",slug:"/design-pattern-principle/gof",permalink:"/Notesaurus/docs/design-pattern-principle/gof",draft:!1,unlisted:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/design-pattern-principle/gof.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"101",permalink:"/Notesaurus/docs/spring-cloud/overview"},next:{title:"SOLID",permalink:"/Notesaurus/docs/design-pattern-principle/solid"}},d={},h=[{value:"Refactoring Guru",id:"refactoring-guru",level:2},{value:"Flash Card",id:"flash-card",level:2},{value:"Creational Patterns",id:"creational-patterns",level:3},{value:"Structural Patterns",id:"structural-patterns",level:3},{value:"Behavoral Patterns",id:"behavoral-patterns",level:3},{value:"Reference",id:"reference",level:2}];function a(e){const i={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h1,{id:"gang-of-four",children:"Gang of Four"}),"\n",(0,r.jsx)(i.h2,{id:"refactoring-guru",children:"Refactoring Guru"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["A good site to learn GoF ",(0,r.jsx)(i.a,{href:"https://refactoring.guru/design-patterns",children:"https://refactoring.guru/design-patterns"})]}),"\n",(0,r.jsxs)(i.li,{children:["Understand ",(0,r.jsx)(i.strong,{children:"aggregation or composition"})," vs ",(0,r.jsx)(i.strong,{children:"inheritance"})]}),"\n"]}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsx)(i.p,{children:"Aggregation or Composition work almost the same way: one object has a reference to another and delegates it some work, whereas with inheritance, the object itself is able to do that work, inheriting the behavior from its superclass."}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"flash-card",children:"Flash Card"}),"\n",(0,r.jsx)(i.h3,{id:"creational-patterns",children:"Creational Patterns"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Pattern"}),(0,r.jsx)("th",{children:"Structure"}),(0,r.jsx)("th",{children:"Key Point"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Factory Method"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Creator"}),(0,r.jsx)("li",{children:"Product"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Product creation via its own factory method"}),(0,r.jsx)("li",{children:"Object creation via factory method instead of new operator"}),(0,r.jsxs)("li",{children:["Rely on ",(0,r.jsx)("b",{children:"inheritance"}),". The only thing that could change the return value would be a subclass"]}),(0,r.jsx)("li",{children:"Specialization of Template Method"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Abstract Factory"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Factory"}),(0,r.jsx)("li",{children:"Product"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Families (Variant) of related objects"}),(0,r.jsx)("li",{children:"Products creation via an object, i.e. Abstract Factory"}),(0,r.jsxs)("li",{children:["Use ",(0,r.jsx)("b",{children:"composition"}),". Delegates object instantiation to another object (Abstract factory) via composition."]})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Builder"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Director"}),(0,r.jsx)("li",{children:"Builder"}),(0,r.jsx)("li",{children:"Product"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Construct complex objects step by step"}),(0,r.jsx)("li",{children:"Get rid of telescoping constructor"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Prototype"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Prototype"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Clone"})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Singleton"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Singleton"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Only 1 object can be created."}),(0,r.jsx)("li",{children:"Private constructor to prevent object creation via new method."}),(0,r.jsx)("li",{children:"Create object via class method getInstance"})]})})]})]}),"\n",(0,r.jsx)(i.h3,{id:"structural-patterns",children:"Structural Patterns"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Pattern Name"}),(0,r.jsx)("th",{children:"Structure"}),(0,r.jsx)("th",{children:"Key Point"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Adaptor"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Client Interface"}),(0,r.jsx)("li",{children:"Adaptor"}),(0,r.jsx)("li",{children:"Service"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Convert an interface to suit another different interface"}),(0,r.jsx)("li",{children:"Used when communicating with third party libraries"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Bridge"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Abstraction"}),(0,r.jsx)("li",{children:"Implementation"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://stackoverflow.com/questions/1425171/difference-between-bridge-pattern-and-adapter-pattern",children:" Read Stack overflow here"})}),(0,r.jsx)("li",{children:"Implementating upfront"}),(0,r.jsx)("li",{children:"Prevent insane number of classes created due to combinations of several orthogonal hierarchies "}),(0,r.jsx)("li",{children:"Divide current classes into 2 or more, separate, orthogonal hierarchies"}),(0,r.jsx)("li",{children:"Decouple abstraction and implementation. Note that the abstraction and implementation here do not mean abstract classes, interface and concrete classes. It is about how we extract the relationship of objects into abstraction and implementation. The abstraction defines what to do. The implementaion focuses on how to do."})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Composite"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Component"}),(0,r.jsx)("li",{children:"Leaf"}),(0,r.jsx)("li",{children:"Composite"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Compose objects into tree-like object structures"})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Decorator"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Component"}),(0,r.jsx)("li",{children:"Decorator"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"a.k.a Wrapper, Skin"}),(0,r.jsx)("li",{children:"1 to 1"}),(0,r.jsx)("li",{children:"Can chain multiple decorators"}),(0,r.jsx)("li",{children:"Resulting objects will be structured as a stack"}),(0,r.jsx)("li",{children:"Contain same set of methods as the target object"}),(0,r.jsx)("li",{children:"may alter the result by doing something either before or after it passes the request to the target"}),(0,r.jsx)("li",{children:"e.g. io streams, compress then encrypt"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Facade"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Facade"}),(0,r.jsx)("li",{children:"Additional Facade"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Simplified Interface"}),(0,r.jsx)("li",{children:"Hide complex and unused interface"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Flyweight"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Context"}),(0,r.jsx)("li",{children:"FlyweightFactory"}),(0,r.jsx)("li",{children:"Flyweight"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Share common immutable states"}),(0,r.jsx)("li",{children:"Reduce number of repeated objects"}),(0,r.jsx)("li",{children:"Save Memory"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Proxy"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Proxy"}),(0,r.jsx)("li",{children:"Service Interface"}),(0,r.jsx)("li",{children:"Service"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Exactly the same interface as service interface"}),(0,r.jsx)("li",{children:"Useful for unit test by swapping the implementation with proxy object"})]})})]})]}),"\n",(0,r.jsx)(i.h3,{id:"behavoral-patterns",children:"Behavoral Patterns"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Pattern Name"}),(0,r.jsx)("th",{children:"Structure"}),(0,r.jsx)("th",{children:"Key Point"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Chain of Responsibility"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Handler"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"setNext method to define the next handler"}),(0,r.jsx)("li",{children:"Example: Javascript event bubbling (See if it should handle the event, if not, propagate the request further)"}),(0,r.jsx)("li",{children:"Example: Spring MVC handler"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Command"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Invoker (Sender)"}),(0,r.jsx)("li",{children:"Command"}),(0,r.jsx)("li",{children:"Receiver"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Request Object"})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Iterator"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Iterator"}),(0,r.jsx)("li",{children:"IterableCollection"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Extract the object transversal algorithm of a collection into a separate iterator object"})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Mediator"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Mediator"}),(0,r.jsx)("li",{children:"Components"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Eliminate dependencies among components"}),(0,r.jsx)("li",{children:"Components do not know each other. They must call each other via mediator."}),(0,r.jsx)("li",{children:"Centralize communication, easily become God Object"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Memento"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Originator"}),(0,r.jsx)("li",{children:"Memento"}),(0,r.jsx)("li",{children:"Caretaker"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Memento = Snapshot"}),(0,r.jsx)("li",{children:"Originator is the original object that hold the state"}),(0,r.jsx)("li",{children:"Originator creates Memento"}),(0,r.jsx)("li",{children:"Memento links to originator"}),(0,r.jsx)("li",{children:"Caretaker stores Memento"}),(0,r.jsx)("li",{children:"Honor security of an object. Caretaker do not access the state of memento."})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Observer"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Publisher"}),(0,r.jsx)("li",{children:"Subscriber"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["Example: Redux framework notifies only subscriber of a particular slice. Read ",(0,r.jsx)("a",{href:"https://medium.com/@jackwong_60367/observer-pattern-in-react-using-redux-ca9998e885b0",children:"here."})]}),(0,r.jsx)("li",{children:"Example: Event driven architecture"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Strategy"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Context"}),(0,r.jsx)("li",{children:"Strategy"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Based on composition"}),(0,r.jsx)("li",{children:"Family of algorithm"}),(0,r.jsx)("li",{children:"Extract the target logic into strategy object"}),(0,r.jsx)("li",{children:"Can switch behavior during runtime (Swap another strategy object in context)"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"State"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Context"}),(0,r.jsx)("li",{children:"State"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Based on composition"}),(0,r.jsx)("li",{children:"Extract state related logic into state object"}),(0,r.jsx)("li",{children:"An extension of Strategy pattern. State allows dependence between state object."}),(0,r.jsx)("li",{children:"Can switch behavior during runtime (Swap another state object in context)"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Template Method"}),(0,r.jsx)("td",{children:"Template Method in abstract class"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Based on inheritance"}),(0,r.jsx)("li",{children:"Inheritance version of strategy"}),(0,r.jsx)("li",{children:"Extract the target logic into template method"}),(0,r.jsx)("li",{children:"Class Level, cannot switch behavior at runtime"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Visitor"}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Client"}),(0,r.jsx)("li",{children:"Element"}),(0,r.jsx)("li",{children:"Visitor"})]})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Double Dispatch"}),(0,r.jsx)("li",{children:"Both elements and visitors has its own hierarcy"}),(0,r.jsx)("li",{children:"accept method in Element"}),(0,r.jsx)("li",{children:"visit method in Visitor"}),(0,r.jsx)("li",{children:"elementA.accept(visitorA)"}),(0,r.jsx)("li",{children:"hierarchy of elements accept variant of operations"}),(0,r.jsxs)("li",{children:["Read ",(0,r.jsx)("a",{href:"https://medium.com/geekculture/design-pattern-visitor-pattern-the-most-complicated-design-pattern-with-c-code-sample-f88b608ffb4a",children:"article 1"}),". Read ",(0,r.jsx)("a",{href:"https://medium.com/@amritlalsahu5/visitor-design-pattern-364c712f46ca",children:"article 2."})]})]})})]})]}),"\n",(0,r.jsx)(i.h2,{id:"reference",children:"Reference"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://stackoverflow.com/questions/5739611/what-are-the-differences-between-abstract-factory-and-factory-design-patterns",children:"What are the differences between Abstract Factory and Factory design patterns?"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsxs)(i.a,{href:"https://stackoverflow.com/questions/46495698/why-does-the-builder-pattern-not-have-a-method-getresult-in-the-builder-inte",children:["Why does the builder pattern not have a method ",(0,r.jsx)(i.code,{children:"GetResult()"})," in the builder interface?"]})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://stackoverflow.com/questions/48686826/react-js-what-is-the-difference-betwen-hoc-and-decorator",children:"React js - What is the difference between HOC and decorator pattern"})}),"\n"]})]})}function o(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},1151:(e,i,t)=>{t.d(i,{Z:()=>c,a:()=>s});var r=t(7294);const n={},l=r.createContext(n);function s(e){const i=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),r.createElement(l.Provider,{value:i},e.children)}}}]);