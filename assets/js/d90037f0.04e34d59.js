"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[6788],{1866:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var l=t(7462),n=(t(7294),t(3905));t(1839);const r={sidebar_position:2},i="Core Java",o={unversionedId:"java/core",id:"java/core",title:"Core Java",description:"Below notes are based on the book OCP Oracle Certified Professional Java SE 17 Developer Study Guide.",source:"@site/docs/java/core.md",sourceDirName:"java",slug:"/java/core",permalink:"/Notesaurus/docs/java/core",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/java/core.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"JVM",permalink:"/Notesaurus/docs/java/jvm"},next:{title:"Misc",permalink:"/Notesaurus/docs/java/misc"}},s={},p=[{value:"Building Blocks",id:"building-blocks",level:2},{value:"Environment",id:"environment",level:3},{value:"Class Structure",id:"class-structure",level:3},{value:"Fields and Methods",id:"fields-and-methods",level:4},{value:"Classes and Source Files",id:"classes-and-source-files",level:4},{value:"main() method",id:"main-method",level:4},{value:"Packages and Imports",id:"packages-and-imports",level:3},{value:"Compilation, Execution and JAR files",id:"compilation-execution-and-jar-files",level:3},{value:"Ordering elements in a class",id:"ordering-elements-in-a-class",level:3},{value:"Creating objects",id:"creating-objects",level:3},{value:"Primitive Type and Literals",id:"primitive-type-and-literals",level:3},{value:"Reference Type",id:"reference-type",level:3},{value:"Primitive Type vs Reference Type",id:"primitive-type-vs-reference-type",level:3},{value:"Wrapper Class",id:"wrapper-class",level:3},{value:"Text Block",id:"text-block",level:3},{value:"Declaring variables",id:"declaring-variables",level:3},{value:"Case convention",id:"case-convention",level:3},{value:"Declaring multiple variables",id:"declaring-multiple-variables",level:3},{value:"Initializing variables",id:"initializing-variables",level:3},{value:"Using var for local variable",id:"using-var-for-local-variable",level:3},{value:"Variable scope",id:"variable-scope",level:3},{value:"Garbage collection",id:"garbage-collection",level:3},{value:"Operators",id:"operators",level:2},{value:"Order of operator precedence",id:"order-of-operator-precedence",level:3},{value:"Unary Operators",id:"unary-operators",level:3},{value:"Binary Arithemtic Operators",id:"binary-arithemtic-operators",level:3},{value:"Numeric Promotion",id:"numeric-promotion",level:3},{value:"Assignment Operators",id:"assignment-operators",level:3},{value:"Making Decisions",id:"making-decisions",level:2},{value:"Core APIs",id:"core-apis",level:2},{value:"Methods",id:"methods",level:2},{value:"Class Design",id:"class-design",level:2},{value:"Beyond Classes",id:"beyond-classes",level:2},{value:"Lambdas And Functional Interfaces",id:"lambdas-and-functional-interfaces",level:2}],m={toc:p};function c(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,l.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"core-java"},"Core Java"),(0,n.kt)("p",null,"Below notes are based on the book ",(0,n.kt)("em",{parentName:"p"},"OCP Oracle Certified Professional Java SE 17 Developer Study Guide"),"."),(0,n.kt)("h2",{id:"building-blocks"},"Building Blocks"),(0,n.kt)("h3",{id:"environment"},"Environment"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"JDK"),": Java Development Kit",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"javac"),": Convert .java (source file) into .class (bytecode)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"java"),": Execute"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"jar"),": Package"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"javadoc"),": Document"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"JRE"),": Java Runtime Environment",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"subset of JDK"),(0,n.kt)("li",{parentName:"ul"},"could not compile"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"IDE"),": Integrated Development Environment")),(0,n.kt)("h3",{id:"class-structure"},"Class Structure"),(0,n.kt)("h4",{id:"fields-and-methods"},"Fields and Methods"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Methods",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"a.k.a. functions / procedures in other languages"))),(0,n.kt)("li",{parentName:"ol"},"Fields",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"variables"))),(0,n.kt)("li",{parentName:"ol"},"Methods and Fields are ",(0,n.kt)("strong",{parentName:"li"},"members")," of the class."),(0,n.kt)("li",{parentName:"ol"},"void",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"special return type"),(0,n.kt)("li",{parentName:"ul"},"no value at all is returned."))),(0,n.kt)("li",{parentName:"ol"},"Method name and parameter types are called the ",(0,n.kt)("strong",{parentName:"li"},"method signature"),".")),(0,n.kt)("h4",{id:"classes-and-source-files"},"Classes and Source Files"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Class is the top level type."),(0,n.kt)("li",{parentName:"ol"},"You can put two or more classes in a file."),(0,n.kt)("li",{parentName:"ol"},"At most one of the top level type is allowed to be public."),(0,n.kt)("li",{parentName:"ol"},"If you have a public top level type, it must match the filename.")),(0,n.kt)("h4",{id:"main-method"},"main() method"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"main() method is for execution of the program.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"public static void main(String[] args)\npublic static void main(String args[])\npublic static void main(String... args)\nfinal public static void main(String... args)\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"public is an access modifier."),(0,n.kt)("li",{parentName:"ul"},"static as no object is created."),(0,n.kt)("li",{parentName:"ul"},"... are called ",(0,n.kt)("inlineCode",{parentName:"li"},"varargs")," variable argument lists."))),(0,n.kt)("li",{parentName:"ol"},"Compile and execute as follow:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"javac Test.java\njava Test    \n"))),(0,n.kt)("li",{parentName:"ol"},"File must have extention .java."),(0,n.kt)("li",{parentName:"ol"},"The result of compilation is .class file, which is bytecode."),(0,n.kt)("li",{parentName:"ol"},"Shortcut for single file source code.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"java Test.java\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Skip explicit compilation steps."),(0,n.kt)("li",{parentName:"ul"},"This feature is called ",(0,n.kt)("strong",{parentName:"li"},"launching single-file source code")," programs."),(0,n.kt)("li",{parentName:"ul"},"This feature is designed for when your program is one file.")))),(0,n.kt)("h3",{id:"packages-and-imports"},"Packages and Imports"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Packages is the logical grouping for classes."),(0,n.kt)("li",{parentName:"ol"},"Package name are hierarchical, separated by period (.)."),(0,n.kt)("li",{parentName:"ol"},"Directory structure is related to the package name."),(0,n.kt)("li",{parentName:"ol"},"Import statement tells Java which package to look in for classes."),(0,n.kt)("li",{parentName:"ol"},"You can import all the classes of package with wildcard *."),(0,n.kt)("li",{parentName:"ol"},"Wildcard can help shorten import list."),(0,n.kt)("li",{parentName:"ol"},"Importing a lot of classes will not slow down execution time."),(0,n.kt)("li",{parentName:"ol"},"Below are limitations for import.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"wildcard can only match class names, but not directory / paths."),(0,n.kt)("li",{parentName:"ul"},"There can only be 1 wildcard, and it must be placed at the end."),(0,n.kt)("li",{parentName:"ul"},"Import can only be used to match class names, not methods."))),(0,n.kt)("li",{parentName:"ol"},"Naming conflicts",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Class names don't have to be unique across all of Java."),(0,n.kt)("li",{parentName:"ul"},"The class name you imported are therefore can be found in multiple places."),(0,n.kt)("li",{parentName:"ul"},"Explicitly importing a class name will take precedence over any wildcard present.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"import java.util.Date; // This will win\nimport java.sql.*;\n"))),(0,n.kt)("li",{parentName:"ul"},"In case you need a class name from 2 different packages, use ",(0,n.kt)("em",{parentName:"li"},"fully qualified class name")," to declare the fields.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"java.util.Date utilDate;\njava.sql.Date sqlDate;\n"))))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"java.lang")," are automatically imported."),(0,n.kt)("li",{parentName:"ol"},"Classes in the same package do not need to be imported.")),(0,n.kt)("h3",{id:"compilation-execution-and-jar-files"},"Compilation, Execution and JAR files"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"You can compile as below.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"javac org/irushu/test/Test.java\njavac org/irushu/test/*.java\njavac *.java // This won't compile the source file in package org.irush.test\n"))),(0,n.kt)("li",{parentName:"ol"},"You can use ",(0,n.kt)("strong",{parentName:"li"},"-d")," to place class files in a different directory.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"javac -d classes org/irushu/test/Test.java\n"))),(0,n.kt)("li",{parentName:"ol"},"You can specify the classpath for required libraries to compile the program."),(0,n.kt)("li",{parentName:"ol"},"You can specify the classpath and run the program.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"java -cp classes org.irushu.test.Test\njava -classpath classes org.irushu.test.Test\njava --class-path classes org.irushu.test.Test\n"))),(0,n.kt)("li",{parentName:"ol"},"You can create jar file as below.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"jar -cvf test.jar .\njar -cvf test.jar -C classes . // -C specify the location that contains the class files\njar --create --verbose --file test.jar .\n")))),(0,n.kt)("h3",{id:"ordering-elements-in-a-class"},"Ordering elements in a class"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Elements should be ordered in a class as below.",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Package declaration"),(0,n.kt)("li",{parentName:"ol"},"Import statement"),(0,n.kt)("li",{parentName:"ol"},"Top level type declaration (Class / Interface / Enum)"),(0,n.kt)("li",{parentName:"ol"},"Field declaration"),(0,n.kt)("li",{parentName:"ol"},"Method declaration")))),(0,n.kt)("h3",{id:"creating-objects"},"Creating objects"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"You can define ",(0,n.kt)("strong",{parentName:"li"},"constructor")," for creation of objects."),(0,n.kt)("li",{parentName:"ol"},"Below is an example of constructor. Note it does not have return type.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"public class Test{\n    public Test(){\n        // do something\n    }\n}\n"))),(0,n.kt)("li",{parentName:"ol"},"If you don't provide a constructor, compiler will supply a do nothing default constructor for you."),(0,n.kt)("li",{parentName:"ol"},"You can create object with the ",(0,n.kt)("strong",{parentName:"li"},"new")," keyword.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"Test test = new Test();\n"))),(0,n.kt)("li",{parentName:"ol"},"One can read and write instance variables directly from the caller. ",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'public class Test{\n    String helloWorld = "Hello World";\n    public static void main(String... args){\n        Test test = new Test();\n        test.helloWorld = "Happy Valley";\n    }\n}\n'))),(0,n.kt)("li",{parentName:"ol"},"However, one should honour encapsulation and protect instance variables with access modifier."),(0,n.kt)("li",{parentName:"ol"},"One can define ",(0,n.kt)("strong",{parentName:"li"},"Instance initializer")," as below.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'public class Test{\n   {\n        System.out.println("Test");\n   }\n}\n'))),(0,n.kt)("li",{parentName:"ol"},"Order of execution",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Fields and Instance Initializer run in the order they appeared in the file."),(0,n.kt)("li",{parentName:"ul"},"Constructor"))),(0,n.kt)("li",{parentName:"ol"},"Order matters and you can't refer to a variable before it has been defined.")),(0,n.kt)("h3",{id:"primitive-type-and-literals"},"Primitive Type and Literals"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"There are 8 primitive types.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"byte")," (8), ",(0,n.kt)("strong",{parentName:"li"},"short")," (16), ",(0,n.kt)("strong",{parentName:"li"},"int")," (32), ",(0,n.kt)("strong",{parentName:"li"},"long")," (64)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Signed"),(0,n.kt)("li",{parentName:"ul"},"Each numeric type is twice the size as the smaller similar type."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"float")," (32), ",(0,n.kt)("strong",{parentName:"li"},"double")," (64)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Signed"),(0,n.kt)("li",{parentName:"ul"},"Each decimal type is twice the size as the smaller similar type."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"char")," (8)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Unsigned"),(0,n.kt)("li",{parentName:"ul"},"short and char values can be casted to one another as their underlying data size is the same."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"boolean"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"bit size depends on JVM implementation"))))),(0,n.kt)("li",{parentName:"ol"},"When a number, decimal, String or character is present in the code, they are called ",(0,n.kt)("strong",{parentName:"li"},"literals"),"."),(0,n.kt)("li",{parentName:"ol"},"By default java interprets numeric value as int."),(0,n.kt)("li",{parentName:"ol"},"To specify the numeric literal as long, add l or L at the end of it."),(0,n.kt)("li",{parentName:"ol"},"By default java interprets decimal value as double."),(0,n.kt)("li",{parentName:"ol"},"To specify the decimal literal as float, add f or F at the end of it.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// This will error\nfloat a = 2.0; // Cannot compile\n# highlight-next-line\nfloat b = 2.0f;\n"))),(0,n.kt)("li",{parentName:"ol"},"Although float values can be declared with an f suffix, they are not printed with an f suffix.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"float b = 2.0f;\nSystem.out.println(b); // It will print 0.0\n"))),(0,n.kt)("li",{parentName:"ol"},"One can specify a number by ",(0,n.kt)("strong",{parentName:"li"},"changing base"),". By default it is using decimal number system.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"int a = 017; // Octal (0-7)\nint b = 0xFF; // Hexadecimal (0-9 a-f A-F)\nint c = 0B101; // Binary (0-1)\nSystem.out.println(a); // Print 15\nSystem.out.println(b); // Print 255\nSystem.out.println(c); // Print 5\n"))),(0,n.kt)("li",{parentName:"ol"},"You can put underscores in numbers. ",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"int value = 1_000_000;\n"))),(0,n.kt)("li",{parentName:"ol"},"You cannot put underscore at the beginning or end of a literal, or right before or after a decimal point.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// This will error\ndouble a = _999.00; // CANNOT COMPILE\n// This will error\ndouble b = 999.00_; // CANNOT COMPILE\n// This will error\ndouble c = 999._00; // CANNOT COMPILE\n// This will error\ndouble d = 999_.00; // CANNOT COMPILE\n")))),(0,n.kt)("h3",{id:"reference-type"},"Reference Type"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"A ",(0,n.kt)("strong",{parentName:"li"},"reference type")," refers to an object."),(0,n.kt)("li",{parentName:"ol"},"A ",(0,n.kt)("strong",{parentName:"li"},"reference")," \u201cpoints\u201d to an object by storing the memory address where the object is located."),(0,n.kt)("li",{parentName:"ol"},"A reference is like a ",(0,n.kt)("strong",{parentName:"li"},"pointer"),"."),(0,n.kt)("li",{parentName:"ol"},"A reference can be assigned to another object."),(0,n.kt)("li",{parentName:"ol"},"A reference can be assigned to new object.")),(0,n.kt)("h3",{id:"primitive-type-vs-reference-type"},"Primitive Type vs Reference Type"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Primitive types have lowercase type names."),(0,n.kt)("li",{parentName:"ol"},"Reference types have uppercase type names."),(0,n.kt)("li",{parentName:"ol"},"Reference types can be used to call methods."),(0,n.kt)("li",{parentName:"ol"},"Primitive types do not have methods declared on them."),(0,n.kt)("li",{parentName:"ol"},"If primitive types are unknown, assign null to their wrapper class.")),(0,n.kt)("h3",{id:"wrapper-class"},"Wrapper Class"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"valueOf to convert to wrapper class.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'Integer a = Integer.valueOf("456"); // Wrapper\nint b = Integer.parseInt("789"); // Primitive\n'))),(0,n.kt)("li",{parentName:"ol"},"Number classes, Boolean and Character Wrapper classes have userful helper methods:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"byteValue(), shortValue(), intValue(), longValue()"),(0,n.kt)("li",{parentName:"ul"},"floatValue(), doubleValue()"),(0,n.kt)("li",{parentName:"ul"},"booleanValue()"),(0,n.kt)("li",{parentName:"ul"},"charValue()"))),(0,n.kt)("li",{parentName:"ol"},"Helper classes do their best to convert values but can result in a loss of precision.")),(0,n.kt)("h3",{id:"text-block"},"Text Block"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},'"""')," as Start text block and End text block."),(0,n.kt)("li",{parentName:"ol"},"Incidental whitespace"),(0,n.kt)("li",{parentName:"ol"},"Essential whitespace"),(0,n.kt)("li",{parentName:"ol"},"Escape characters")),(0,n.kt)("h3",{id:"declaring-variables"},"Declaring variables"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Identifiers must begin with letter, a currency symbol or undercore symbol _ ."),(0,n.kt)("li",{parentName:"ol"},"Currency symbol includes dollar ($), yuan (\xa5), euro (\u20ac)."),(0,n.kt)("li",{parentName:"ol"},"A single underscore is not allowed."),(0,n.kt)("li",{parentName:"ol"},"Cannot use reserve word."),(0,n.kt)("li",{parentName:"ol"},"Cannot use literal values like true, false or null.")),(0,n.kt)("h3",{id:"case-convention"},"Case convention"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Method or Field names are declared as ",(0,n.kt)("strong",{parentName:"li"},"lowercase camel")," case."),(0,n.kt)("li",{parentName:"ol"},"Constants or enum values are declared as ",(0,n.kt)("strong",{parentName:"li"},"uppercase snake")," case."),(0,n.kt)("li",{parentName:"ol"},"Class and Interface names are declared as ",(0,n.kt)("strong",{parentName:"li"},"uppercase camel")," case.")),(0,n.kt)("h3",{id:"declaring-multiple-variables"},"Declaring multiple variables"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String str1, str2, str3="Foo";\n// This will error\nint int1, float float1; // There can only be one type of declaration in a statement.\n// This will error\nString str4, String str5; // You cannot repeat the same declaration in a statement, even they are the same.\ndouble double1; double double2; // Semicolon separates statements, so there is no violation.\n// This will error\nboolean boolean1; boolean2; Invalid declaration for boolean 2 as type is omitted.\n')),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"You can declare many variables in the same declaration as long as they are all of the same type."),(0,n.kt)("li",{parentName:"ol"},"You cannot repeat the same declaration."),(0,n.kt)("li",{parentName:"ol"},"There can only be one declaration, no other declaration can be made.")),(0,n.kt)("h3",{id:"initializing-variables"},"Initializing variables"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Local variable")," is a variable defined within a constructor, method, or initializer block.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"final")," modifier is equivalent to declaring constants.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"final")," modifier can apply to local variable.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"For ",(0,n.kt)("inlineCode",{parentName:"p"},"final")," variable of primitive type, you cannot change its value once it is initiailized.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"For ",(0,n.kt)("inlineCode",{parentName:"p"},"final")," variable of reference type, you cannot change the reference, but you can modify the content the reference points to.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Local variables do not have ",(0,n.kt)("strong",{parentName:"p"},"default value"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Local variables must be initialized before use.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"For local variables that have never be used, compiler doesn't care if they are not initialized.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Compiler is clever enough to determine whether the local variable has been used or not.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"If you pass uninitialized parameters to constructor or method, the program will fail to compile.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Instance variable")," is a field defined within a specific instance of object.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Class variable")," is defined on the class level and shared among all instances of the class.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Both instance and class variables are given a default value once declared. You don't need to initialize them.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Initialization of instance and class variables sticks to below rules."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"null for an object"),(0,n.kt)("li",{parentName:"ul"},"0 for numeric types"),(0,n.kt)("li",{parentName:"ul"},"0.0 for decimal types"),(0,n.kt)("li",{parentName:"ul"},"false for boolean"),(0,n.kt)("li",{parentName:"ul"},"'\\u000' for char"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Java does not support setting default method parameter values."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"    // This will error\n    public void method(int hello = 3){\n\n    }\n")))),(0,n.kt)("h3",{id:"using-var-for-local-variable"},"Using var for local variable"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"You can use keyword ",(0,n.kt)("inlineCode",{parentName:"li"},"var")," to declare local variables under certain circumstances."),(0,n.kt)("li",{parentName:"ol"},"This feature is called ",(0,n.kt)("strong",{parentName:"li"},"local variable type inference"),"."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"var")," is ",(0,n.kt)("strong",{parentName:"li"},"only")," used for ",(0,n.kt)("strong",{parentName:"li"},"local variables"),"."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"var")," will instruct the compiler to determine the type."),(0,n.kt)("li",{parentName:"ol"},"In javascript, ",(0,n.kt)("inlineCode",{parentName:"li"},"var")," can take on any type."),(0,n.kt)("li",{parentName:"ol"},"But in java, compiler will determine the specific type for ",(0,n.kt)("inlineCode",{parentName:"li"},"var"),". The type cannot be changed during runtime."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"var")," variable cannot be initialized to null during declaration. Compiler cannot infer its type."),(0,n.kt)("li",{parentName:"ol"},"If the underlying type is a reference type, ",(0,n.kt)("inlineCode",{parentName:"li"},"var")," variable can be reassigned with null value after declaration."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"var")," cannot be used in multiple variable assignment."),(0,n.kt)("li",{parentName:"ol"},"For ",(0,n.kt)("inlineCode",{parentName:"li"},"var"),", compiler will look only at the line of declaration. variable must be assigned values on the lines where they are defined.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'void methodA(){\n    var a = "String A";\n    var b\n        = 5;\n    // This will error\n    var c; // var variable is not assigned with values on the same line they are declared.\n    c = 1;\n    // This will error\n    var d = null; // compiler cannot infer the type\n    var e = "String B";\n    e = null;\n    // This will error  \n    var f = 2, g = 2; // var cannot be used in multiple variable assignment\n}\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"var")," cannot be used on method parameters.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"}," // This will error\n void methodB(var a, var b){\n \n }\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"var")," is not a reserved word and allowed to be used as an identifier.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'void methodC(){\n    {/* highlight-start */}\n    var var = "hello"; // This will compile\n    {/* highlight-end */}\n}\n')))),(0,n.kt)("h3",{id:"variable-scope"},"Variable scope"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"A set of braces means a new code block."),(0,n.kt)("li",{parentName:"ol"},"Each code block has its own scope."),(0,n.kt)("li",{parentName:"ol"},"Code block can contain another code block. "),(0,n.kt)("li",{parentName:"ol"},"Inner block can reference variables of outer block, but not vice versa."),(0,n.kt)("li",{parentName:"ol"},"Scope for different type of varibles",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Local variable: In scope from declaration to the end of the block."),(0,n.kt)("li",{parentName:"ul"},"Method parameters: In scope for the duration of the method."),(0,n.kt)("li",{parentName:"ul"},"Instance variable: In scope from declaration until the object is eligible for gc."),(0,n.kt)("li",{parentName:"ul"},"Class variable: In scope from declaration to end of the program.")))),(0,n.kt)("h3",{id:"garbage-collection"},"Garbage collection"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"For details, refers to ",(0,n.kt)("a",{parentName:"li",href:"/Notesaurus/docs/java/jvm"},"JVM section"),"."),(0,n.kt)("li",{parentName:"ol"},"System.gc() is not guranteed to do anything. JVM can ignore it.")),(0,n.kt)("h2",{id:"operators"},"Operators"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"An ",(0,n.kt)("strong",{parentName:"li"},"operator")," is a special symbol or operation that can be applied to operands."),(0,n.kt)("li",{parentName:"ol"},"An ",(0,n.kt)("strong",{parentName:"li"},"operand")," is the variable / literal / value the operator being applied to."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"unary"),", ",(0,n.kt)("strong",{parentName:"li"},"binary")," and ",(0,n.kt)("strong",{parentName:"li"},"tenary")," operator take 1, 2 and 3 operand(s) respectively."),(0,n.kt)("li",{parentName:"ol"},"Evaluation can be ",(0,n.kt)("strong",{parentName:"li"},"left-to-right")," or ",(0,n.kt)("strong",{parentName:"li"},"right-to-left"),"."),(0,n.kt)("li",{parentName:"ol"},"Some operators require the operand of specific type.")),(0,n.kt)("h3",{id:"order-of-operator-precedence"},"Order of operator precedence"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Operator should follow below orders"),(0,n.kt)("table",{parentName:"li"},(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Operator"),(0,n.kt)("th",{parentName:"tr",align:null},"Symbols"),(0,n.kt)("th",{parentName:"tr",align:null},"Evaluation"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Post-unary operators"),(0,n.kt)("td",{parentName:"tr",align:null},"expression++, expression--"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Pre-unary operators"),(0,n.kt)("td",{parentName:"tr",align:null},"++expression, --expression"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Other unary operators"),(0,n.kt)("td",{parentName:"tr",align:null},"-, !, ~, +, (type)"),(0,n.kt)("td",{parentName:"tr",align:null},"Right-to-left")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Cast\t(Type)"),(0,n.kt)("td",{parentName:"tr",align:null},"reference"),(0,n.kt)("td",{parentName:"tr",align:null},"Right-to-left")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Multiplication/division/modulus"),(0,n.kt)("td",{parentName:"tr",align:null},"*, /, %"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Addition/subtraction"),(0,n.kt)("td",{parentName:"tr",align:null},"+, -"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Shift operators"),(0,n.kt)("td",{parentName:"tr",align:null},"<<, >>, >>>"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Relational operators"),(0,n.kt)("td",{parentName:"tr",align:null},"<, >, <=, >=, instanceof"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Equal to/not equal to"),(0,n.kt)("td",{parentName:"tr",align:null},"==, !="),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Logical AND"),(0,n.kt)("td",{parentName:"tr",align:null},"&"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Logical exclusive OR"),(0,n.kt)("td",{parentName:"tr",align:null},"^"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Logical inclusive OR"),(0,n.kt)("td",{parentName:"tr",align:null},"|"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Conditional AND"),(0,n.kt)("td",{parentName:"tr",align:null},"&&"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Conditional OR"),(0,n.kt)("td",{parentName:"tr",align:null},"|","|"),(0,n.kt)("td",{parentName:"tr",align:null},"LR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Ternary operators"),(0,n.kt)("td",{parentName:"tr",align:null},"boolean expression ? expression1 : expression2"),(0,n.kt)("td",{parentName:"tr",align:null},"Right-to-left")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Assignment operators"),(0,n.kt)("td",{parentName:"tr",align:null},"=, +=, -=, *=, /=, %=, &=, ^=, ","|","=, <<=, >>=, >>>="),(0,n.kt)("td",{parentName:"tr",align:null},"Right-to-left")))))),(0,n.kt)("h3",{id:"unary-operators"},"Unary Operators"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Requires exactly one operand to function."),(0,n.kt)("table",{parentName:"li"},(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Operator"),(0,n.kt)("th",{parentName:"tr",align:null},"Examples"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Logical complement"),(0,n.kt)("td",{parentName:"tr",align:null},"!a"),(0,n.kt)("td",{parentName:"tr",align:null},"Inverts a boolean's logical value")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Bitwise complement"),(0,n.kt)("td",{parentName:"tr",align:null},"~b"),(0,n.kt)("td",{parentName:"tr",align:null},"Inverts all 0s and 1s in a number")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Plus"),(0,n.kt)("td",{parentName:"tr",align:null},"+c"),(0,n.kt)("td",{parentName:"tr",align:null},"Indicates a number is positive")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Negation or minus"),(0,n.kt)("td",{parentName:"tr",align:null},"-d"),(0,n.kt)("td",{parentName:"tr",align:null},"Indicates a literal number is negative or negates an expression")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Increment"),(0,n.kt)("td",{parentName:"tr",align:null},"++e f++"),(0,n.kt)("td",{parentName:"tr",align:null},"Increments a value by 1")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Decrement"),(0,n.kt)("td",{parentName:"tr",align:null},"--f h--"),(0,n.kt)("td",{parentName:"tr",align:null},"Decrements a value by 1"))))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Bitwise complement operator ( ~ )")," flips all 0s and 1s in a number. ")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Bitwise complement operator can apply only on byte, short, int, long, char.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"You can use the formula ",(0,n.kt)("inlineCode",{parentName:"p"},"bitwise complement = -1 * number value -1")," to calculate the result for bitwise complement operation.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Negation operator ( - )")," reverses the sign of numeric expression.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Negation operator can apply only on numeric expression.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Increment and decrement operators ( ++ -- )")," can apply only on numeric variable.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The order on how Increment and decrement operators attached to the variable can change the behavior."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"++x / --y"),": increase / decrease by 1 and return the ",(0,n.kt)("strong",{parentName:"li"},"new value"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"x++ / y--"),": increase / decrease by 1 but return the ",(0,n.kt)("strong",{parentName:"li"},"original value"),".")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"int a = 1;\nSystem.out.println(++a); // print 2\nSystem.out.println(a++); // print 2\nSystem.out.println(a); // print 3\n")))),(0,n.kt)("h3",{id:"binary-arithemtic-operators"},"Binary Arithemtic Operators"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Addition: ",(0,n.kt)("inlineCode",{parentName:"li"},"a + b")),(0,n.kt)("li",{parentName:"ol"},"Subtraction: ",(0,n.kt)("inlineCode",{parentName:"li"},"a - b")),(0,n.kt)("li",{parentName:"ol"},"Multiplication: ",(0,n.kt)("inlineCode",{parentName:"li"},"a * b")),(0,n.kt)("li",{parentName:"ol"},"Division: ",(0,n.kt)("inlineCode",{parentName:"li"},"a / b")),(0,n.kt)("li",{parentName:"ol"},"Modulus: ",(0,n.kt)("inlineCode",{parentName:"li"},"a % b")),(0,n.kt)("li",{parentName:"ol"},"Arithmetic operators can apply on all primitives, except boolean."),(0,n.kt)("li",{parentName:"ol"},"Addition operators ( + ) can apply on String for concatenation."),(0,n.kt)("li",{parentName:"ol"},"You can change the precedence by wrapping with ",(0,n.kt)("strong",{parentName:"li"},"parentheses"),"."),(0,n.kt)("li",{parentName:"ol"},"Parentheses should be applied in a ",(0,n.kt)("em",{parentName:"li"},"valid")," and ",(0,n.kt)("em",{parentName:"li"},"balanced")," manner.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A new right parentheses match with a previous left parentheses"),(0,n.kt)("li",{parentName:"ul"},"Equal number of left and right parentheses"))),(0,n.kt)("li",{parentName:"ol"},"For ",(0,n.kt)("strong",{parentName:"li"},"integer")," values, ",(0,n.kt)("strong",{parentName:"li"},"division")," results in the ",(0,n.kt)("strong",{parentName:"li"},"floor value")," (value without anything after the decimal point) of the nearest integer that fulfills the operation.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"System.out.println(13 / 4); // Prints 3\n")))),(0,n.kt)("h3",{id:"numeric-promotion"},"Numeric Promotion"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Numeric Promotion rules",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"If two values have different data types, promote one of the values to the larger of the two data types.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"int a = 1;\nlong b = 2;\nvar c = a + b; // a will be promoted to long. c will be long.\n"))),(0,n.kt)("li",{parentName:"ul"},"If one is integral and the other is floating-point, promote the integral value to the floating-point value's data type.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"int a = 1;\nfloat b = 2.1f;\nvar c = a + b; // a will be promoted to float. c will be float.\n"))),(0,n.kt)("li",{parentName:"ul"},"Smaller data types, namely, byte, short, and char, are first promoted to int, even if neither of the operands is int. ",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"byte a = 1;\nshort b = 2;\nvar c = a + b; // a and b will be promoted to int. c will be int.\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Unary operators are ",(0,n.kt)("strong",{parentName:"li"},"excluded")," from this rule."))),(0,n.kt)("li",{parentName:"ul"},"Resulting value will have the same data type as its promoted operands."))),(0,n.kt)("li",{parentName:"ol"},"Be aware of the data type of variables, intermediate values, and resulting values")),(0,n.kt)("h3",{id:"assignment-operators"},"Assignment Operators"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Binary operator that assigns variable on the left side with the result of the equation on the right side."),(0,n.kt)("li",{parentName:"ol"},"Promotion rule and Casting will occur during assignment."),(0,n.kt)("li",{parentName:"ol"},"Automatically promote from smaller to larger data type."),(0,n.kt)("li",{parentName:"ol"},"Compilation error occurs if you try to promote from larger to smaller data type without casting."),(0,n.kt)("li",{parentName:"ol"},"Casting is a unary operation."),(0,n.kt)("li",{parentName:"ol"},"Compiler automatically casts smaller types to larger ones."),(0,n.kt)("li",{parentName:"ol"},"Casting is required when converting to smaller data type."),(0,n.kt)("li",{parentName:"ol"},"Casting is performed by placing the data type, enclosed in parentheses, to the left of the value you want to cast.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"short a = (short) 10;\n"))),(0,n.kt)("li",{parentName:"ol"},"Casting can also be applied to object and reference."),(0,n.kt)("li",{parentName:"ol"},"No conversion is performed for casting of object / reference."),(0,n.kt)("li",{parentName:"ol"},"Casting an object only change the reference of the object, not the object itself.")),(0,n.kt)("h2",{id:"making-decisions"},"Making Decisions"),(0,n.kt)("h2",{id:"core-apis"},"Core APIs"),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h2",{id:"class-design"},"Class Design"),(0,n.kt)("h2",{id:"beyond-classes"},"Beyond Classes"),(0,n.kt)("h2",{id:"lambdas-and-functional-interfaces"},"Lambdas And Functional Interfaces"))}c.isMDXComponent=!0}}]);