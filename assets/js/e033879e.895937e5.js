"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[7042],{2278:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(7462),l=(n(7294),n(3905));n(1839);const r={sidebar_position:99},i="GIT",o={unversionedId:"git",id:"git",title:"GIT",description:"1. Porcelain Command (Enquiry)",source:"@site/docs/git.md",sourceDirName:".",slug:"/git",permalink:"/Notesaurus/docs/git",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/git.md",tags:[],version:"current",sidebarPosition:99,frontMatter:{sidebar_position:99},sidebar:"tutorialSidebar",previous:{title:"Day 0: Gang of Four",permalink:"/Notesaurus/docs/design-pattern-principle/gof"}},m={},d=[{value:"1. Porcelain Command (Enquiry)",id:"1-porcelain-command-enquiry",level:2},{value:"2. Porcelain Command (Action)",id:"2-porcelain-command-action",level:2},{value:"3. Plumbing Command",id:"3-plumbing-command",level:2},{value:"4. Terminology and Concepts",id:"4-terminology-and-concepts",level:2},{value:"5. Illustration",id:"5-illustration",level:2},{value:"A. GIT as an object store",id:"a-git-as-an-object-store",level:3},{value:"Step 1. Init the repository",id:"step-1-init-the-repository",level:4},{value:"Step 2. Create file in working tree",id:"step-2-create-file-in-working-tree",level:4},{value:"Step 3. Add file to index tree",id:"step-3-add-file-to-index-tree",level:4},{value:"Step 4. Create another folder and file and add to index tree",id:"step-4-create-another-folder-and-file-and-add-to-index-tree",level:4},{value:"Step 5. Commit the changes to repository",id:"step-5-commit-the-changes-to-repository",level:4},{value:"B. Untracked file vs Tracked file",id:"b-untracked-file-vs-tracked-file",level:3},{value:"Step 1. Create file in working tree",id:"step-1-create-file-in-working-tree",level:4},{value:"Step 2. Modify file in working tree",id:"step-2-modify-file-in-working-tree",level:4},{value:"Step 3. Add to index tree",id:"step-3-add-to-index-tree",level:4},{value:"Step 4. Commit to repository",id:"step-4-commit-to-repository",level:4},{value:"6. Reference",id:"6-reference",level:2}],s={toc:d};function p(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"git"},"GIT"),(0,l.kt)("h2",{id:"1-porcelain-command-enquiry"},"1. Porcelain Command (Enquiry)"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Command")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git --version")),(0,l.kt)("td",{parentName:"tr",align:null},"Show version")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git help --all")),(0,l.kt)("td",{parentName:"tr",align:null},"Complete list of git subcommands")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git {subcommand} --help")),(0,l.kt)("td",{parentName:"tr",align:null},"Documentation for each subcommand")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git config -l --show-scope --show-origin")),(0,l.kt)("td",{parentName:"tr",align:null},"List the settings of all the variable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git show-branch --more=50")),(0,l.kt)("td",{parentName:"tr",align:null},"Show all the commit in reverse order")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git show-branch 'bug/*'")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git status")),(0,l.kt)("td",{parentName:"tr",align:null},"Query the status of the index")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git log --oneline")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"--oneline"),' is a shorthand for "--pretty=oneline --abbrev-commit"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git log --oneline --graph --decorate")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"--graph")," visualize the forks from a commit and the point in which branches merge")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git log -3")),(0,l.kt)("td",{parentName:"tr",align:null},"Limit the range to 3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git log 7a4d4b1...1457b0")),(0,l.kt)("td",{parentName:"tr",align:null},"show commit history from 7a4d4b1 to 1457b0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git log -1 -p --stat {commitId}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"-p")," will print the patch",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"td"},"--stat")," will provide a tally of how many lines were modified")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git log --format=raw")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git log --format=fuller")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git show {commitId}")),(0,l.kt)("td",{parentName:"tr",align:null},"Show the content for a commit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git show {commitId} --name-only")),(0,l.kt)("td",{parentName:"tr",align:null},"Show the content for a commit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git diff")),(0,l.kt)("td",{parentName:"tr",align:null},"Working Tree VS Staging Area")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git diff --cached")),(0,l.kt)("td",{parentName:"tr",align:null},"Staging Area VS HEAD")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git diff --name-status {branch name 1} {branch name 2}")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git reflog show")),(0,l.kt)("td",{parentName:"tr",align:null},"Records what happens in the repository",(0,l.kt)("br",null)," while you commit, reset, check out")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git reflog {branchName}")),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"2-porcelain-command-action"},"2. Porcelain Command (Action)"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Command")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git clone {repository}")),(0,l.kt)("td",{parentName:"tr",align:null},"Clone a repository into a new directory")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git config --global {options} {value}")),(0,l.kt)("td",{parentName:"tr",align:null},"Get and set repository or global options")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git config --unset --global user.email")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove a setting from the configuration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git init")),(0,l.kt)("td",{parentName:"tr",align:null},"Init a Repo")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git init --bare")),(0,l.kt)("td",{parentName:"tr",align:null},"Init a remote repository")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git add .")),(0,l.kt)("td",{parentName:"tr",align:null},"Add file contents to the index")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'git commit -am "Add an orange"')),(0,l.kt)("td",{parentName:"tr",align:null},"Record change to repository")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git push")),(0,l.kt)("td",{parentName:"tr",align:null},"Update remote refs along with associated objects")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git push --force-with-lease")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git pull")),(0,l.kt)("td",{parentName:"tr",align:null},"Fetch from and integrate with another repository")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git fetch --all")),(0,l.kt)("td",{parentName:"tr",align:null},"Download objects and refs from another repository")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git checkout {branchName}")),(0,l.kt)("td",{parentName:"tr",align:null},"Move to Branch {branchName}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git checkout {fileName}")),(0,l.kt)("td",{parentName:"tr",align:null},"Check out a particular file from index to working directory")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git checkout HEAD^")),(0,l.kt)("td",{parentName:"tr",align:null},"Move to Detached HEAD state. ",(0,l.kt)("br",null),"Being in this state basically means that",(0,l.kt)("br",null)," HEAD does not reference a branch")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git branch {branchName} {start-point}")),(0,l.kt)("td",{parentName:"tr",align:null},"Create Branch {branchName} using {start-point}.",(0,l.kt)("br",null)," If not specified, HEAD of currently active branch.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git branch -d {branchName}")),(0,l.kt)("td",{parentName:"tr",align:null},"Delete Branch {branchName}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git branch -D {branchName}")),(0,l.kt)("td",{parentName:"tr",align:null},"Force Delete Branch {branchName}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git branch -m {old-branch-name} {new-branch-name}")),(0,l.kt)("td",{parentName:"tr",align:null},"Rename a Git repository\u2019s branch name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git reset")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"Updating your branch."),(0,l.kt)("li",null,"Moving the tip to add or remove commits from the branch."),(0,l.kt)("li",null,"This operation changes the commit history."),(0,l.kt)("li",null,"Can be used to restore the index, overlapping with git restore.")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git reset")),(0,l.kt)("td",{parentName:"tr",align:null},"Undo all the changes from the index.",(0,l.kt)("br",null),"Keep all the changes in working tree.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git reset --hard {commitId}")),(0,l.kt)("td",{parentName:"tr",align:null},"Moves current branch to this {commitId}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git reset --hard master")),(0,l.kt)("td",{parentName:"tr",align:null},"Moves current branch to master ",(0,l.kt)("a",{href:"https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified"},"Read"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git reset {fileName}")),(0,l.kt)("td",{parentName:"tr",align:null},"Undo the add from the index.",(0,l.kt)("br",null),"Keep the change in working tree.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git restore")),(0,l.kt)("td",{parentName:"tr",align:null},"Restoring files in the working tree from either the index or another commit.",(0,l.kt)("br",null),"Does not update your branch.",(0,l.kt)("br",null),"Can also be used to restore files in the index from another commit.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git restore {fileName}")),(0,l.kt)("td",{parentName:"tr",align:null},"Restore content of working tree from the index")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git restore -s {commitId} {fileName}")),(0,l.kt)("td",{parentName:"tr",align:null},"Restore content of working tree from the specified commit Id")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git restore --staged {fileName}")),(0,l.kt)("td",{parentName:"tr",align:null},"Restore content of index tree from HEAD")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git restore --staged --worktree {fileName}")),(0,l.kt)("td",{parentName:"tr",align:null},"Restore both content of index tree and working tree from HEAD")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"git revert")),(0,l.kt)("td",{parentName:"tr",align:null},"Making a new commit that reverts the changes made by other commits.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git revert {commitId}")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove the change of the specified commit Id and create a new commit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git revert --no-commit {commitId}")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove the change of the specified commit Id without commit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git rebase {branch A}")),(0,l.kt)("td",{parentName:"tr",align:null},"Rebase the current branch on top of branch A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git rebase -i HEAD~{N}")),(0,l.kt)("td",{parentName:"tr",align:null},"Merge several commit into 1",(0,l.kt)("br",null),"i means interactive, while the HEAD~N argument means",(0,l.kt)("br",null)," I want to rebase the last N commits")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git merge {branchName}")),(0,l.kt)("td",{parentName:"tr",align:null},"merge the branch into the master one")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git merge --abort")),(0,l.kt)("td",{parentName:"tr",align:null},"Abort the current merge operation.",(0,l.kt)("br",null),"Restores both working and index tree")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git cherry-pick\xa0{commitId}")),(0,l.kt)("td",{parentName:"tr",align:null},"cherry-pick a particular commit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git cherry-pick\xa0--no-commit {commitId}")),(0,l.kt)("td",{parentName:"tr",align:null},"cherry-pick a particular commit without commit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git remote -v")),(0,l.kt)("td",{parentName:"tr",align:null},"Manage set of tracked")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git tag -a annotatedTag {commitId}")),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"3-plumbing-command"},"3. Plumbing Command"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Command")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git cat-file -t {objectId}")),(0,l.kt)("td",{parentName:"tr",align:null},"Show the type of the object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git cat-file -p {objectId}")),(0,l.kt)("td",{parentName:"tr",align:null},"Unzip and cat the file",(0,l.kt)("br",null),"-p means pretty-print")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'echo "banana"\\| git hash-object --stdin')),(0,l.kt)("td",{parentName:"tr",align:null},"Turns the string into hash code")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git ls-files -s")),(0,l.kt)("td",{parentName:"tr",align:null},"Show files in the index and the working tree")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git rev-parse main~2")),(0,l.kt)("td",{parentName:"tr",align:null},"translate names to commit id")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git write-tree")),(0,l.kt)("td",{parentName:"tr",align:null},"Create a tree object from the current index")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git commit-tree")),(0,l.kt)("td",{parentName:"tr",align:null},"Create a new commit object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"git check-ref-format --branch 'sfx234&(##$#%^#^$'")),(0,l.kt)("td",{parentName:"tr",align:null},"Ensures that a branch name is well formed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"cat .git/refs/heads/main")),(0,l.kt)("td",{parentName:"tr",align:null},"Location of Reference file")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tree .git")),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"4-terminology-and-concepts"},"4. Terminology and Concepts"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Term                  ")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Repository"),(0,l.kt)("td",{parentName:"tr",align:null},"A.k.a HEAD")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Index tree"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"A.k.a Staging tree, Staging Directory, Index, Index Directory, etc"),(0,l.kt)("li",null,"Dynamic stage between working tree and repository"),(0,l.kt)("li",null,"Cached representation of all blob objects"),(0,l.kt)("li",null,"Allow you to alter the content of the index (git add, restore)"),(0,l.kt)("li",null,"Finer control over what content will be stored in the next commit")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Working tree"),(0,l.kt)("td",{parentName:"tr",align:null},"A.k.a Working directory")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},".git folder"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"Hidden subdirectory at the root of working directory."),(0,l.kt)("li",null,"Maintains data structures such as object store, index, ref, etc")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Object"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"Git stores file content as object"),(0,l.kt)("li",null,"Does not include metadata such as pathname, filename, last modified time")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Content-Addressable"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"GIT stores key-value pairs of each object"),(0,l.kt)("li",null,"Key = SHA1 applied to content of object"),(0,l.kt)("li",null,"Value = Compressed Blob object (Packfile)")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SHA1"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"Use to calculate the hash of an object (File Content)"),(0,l.kt)("li",null,"160 bits, 40 digit hexadecimal number"),(0,l.kt)("li",null,"Always compute the same ID for identical content"),(0,l.kt)("li",null,"Effective global unique identifier for the object")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4 object types"),(0,l.kt)("td",{parentName:"tr",align:null},"Blobs / Trees / Commits / Tags")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Blobs"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"Binary files"),(0,l.kt)("li",null,"Contain any data"),(0,l.kt)("li",null,"Treated as opaque: Internal structure ignored by GIT"),(0,l.kt)("li",null,"Does not contain any metadata about the file and its name"),(0,l.kt)("li",null,"Everything is compressed into a blob before archiving it into Git"),(0,l.kt)("li",null,"An object will always have the same hash (SHA-1) anywhere."),(0,l.kt)("li",null,"Different names and paths but with identical content --\x3e Same blob.")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Trees"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"A tree object represents one level of directory information"),(0,l.kt)("li",null,"Records blob identifiers, pathnames, and metadata"),(0,l.kt)("li",null,"Recursively reference other tree objects and build a complete hierarchy")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Commits"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"Holds metadata for each change"),(0,l.kt)("li",null,"Metadata includes author, committer, commit date, and log message"),(0,l.kt)("li",null,"Points to a tree object that captures snapshot"),(0,l.kt)("li",null,"Initial commit has no parent."),(0,l.kt)("li",null,"Usually 1 parent only."),(0,l.kt)("li",null,"Merge results in more than 1 parent.")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Tags"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"Refer to ",(0,l.kt)("inlineCode",{parentName:"td"},"annotated tag"),", not ",(0,l.kt)("inlineCode",{parentName:"td"},"lightweight tag")," here"),(0,l.kt)("li",null,"Human-readable name to a specific object")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Packfile"),(0,l.kt)("td",{parentName:"tr",align:null},"GIT compresses and stores objects in packfiles")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"No Delta"),(0,l.kt)("td",{parentName:"tr",align:null},"Every commit is a snapshot of the entire repository.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Unreachable commits"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"Won't delete unreachable commits immediately"),(0,l.kt)("li",null,"Housekeeping automatically at a given time"),(0,l.kt)("li",null,"GIT has some powerful garbage collection features")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"^ caret"),(0,l.kt)("td",{parentName:"tr",align:null},"main^n means the nth parent of main branch")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"~ tilde"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"Go back before an ancestral parent and select a preceding generation"),(0,l.kt)("li",null,"Always refers to the first parent")))))),(0,l.kt)("h2",{id:"5-illustration"},"5. Illustration"),(0,l.kt)("h3",{id:"a-git-as-an-object-store"},"A. GIT as an object store"),(0,l.kt)("h4",{id:"step-1-init-the-repository"},"Step 1. Init the repository"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# highlight-next-line\nthomasli@Thomas-Lis-MBP illustration1 % git init .\nhint: Using 'master' as the name for the initial branch. This default branch name\nhint: is subject to change. To configure the initial branch name to use in all\nhint: of your new repositories, which will suppress this warning, call:\nhint: \nhint:   git config --global init.defaultBranch <name>\nhint: \nhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\nhint: 'development'. The just-created branch can be renamed via this command:\nhint: \nhint:   git branch -m <name>\n# highlight-next-line\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 objects\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    \u2514\u2500\u2500 tags\n\n9 directories, 17 files\n")),(0,l.kt)("h4",{id:"step-2-create-file-in-working-tree"},"Step 2. Create file in working tree"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# highlight-next-line\nthomasli@Thomas-Lis-MBP illustration1 % echo "Hello World" > HelloWorld.txt\n# highlight-next-line\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 objects\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    \u2514\u2500\u2500 tags\n\n9 directories, 17 files\n')),(0,l.kt)("h4",{id:"step-3-add-file-to-index-tree"},"Step 3. Add file to index tree"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# highlight-next-line\nthomasli@Thomas-Lis-MBP illustration1 % git add HelloWorld.txt \n# highlight-next-line\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n# highlight-next-line\n\u251c\u2500\u2500 index\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 objects\n# highlight-next-line\n\u2502\xa0\xa0 \u251c\u2500\u2500 55\n# highlight-next-line\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7db03de997c86a4a028e1ebd3a1ceb225be238\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    \u2514\u2500\u2500 tags\n# highlight-start\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238\nblob\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p 557db03de997c86a4a028e1ebd3a1ceb225be238\nHello World\n# highlight-end\n")),(0,l.kt)("h4",{id:"step-4-create-another-folder-and-file-and-add-to-index-tree"},"Step 4. Create another folder and file and add to index tree"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# highlight-start\nthomasli@Thomas-Lis-MBP illustration1 % mkdir folderA\nthomasli@Thomas-Lis-MBP illustration1 % echo "Hello World" > folderA/HelloWorld2.txt\nthomasli@Thomas-Lis-MBP illustration1 % git add folderA/HelloWorld2.txt \nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n# highlight-end\n.git\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 index\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 objects\n\u2502\xa0\xa0 \u251c\u2500\u2500 55\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7db03de997c86a4a028e1ebd3a1ceb225be238\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    \u2514\u2500\u2500 tags\n')),(0,l.kt)("h4",{id:"step-5-commit-the-changes-to-repository"},"Step 5. Commit the changes to repository"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# highlight-start\nthomasli@Thomas-Lis-MBP illustration1 % git commit -am "Initial commit"\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n# highlight-end\n.git\n\u251c\u2500\u2500 COMMIT_EDITMSG\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 index\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n# highlight-start\n\u251c\u2500\u2500 logs\n\u2502\xa0\xa0 \u251c\u2500\u2500 HEAD\n\u2502\xa0\xa0 \u2514\u2500\u2500 refs\n\u2502\xa0\xa0     \u2514\u2500\u2500 heads\n\u2502\xa0\xa0         \u2514\u2500\u2500 master\n# highlight-end\n\u251c\u2500\u2500 objects\n# highlight-start\n\u2502\xa0\xa0 \u251c\u2500\u2500 07\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 ff67e7d021a547594965b1723252997f07d088\n# highlight-end\n\u2502\xa0\xa0 \u251c\u2500\u2500 55\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7db03de997c86a4a028e1ebd3a1ceb225be238\n# highlight-start\n\u2502\xa0\xa0 \u251c\u2500\u2500 62\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 862ef896e99e31a8ea3fdbbe6c63f1deecc7be\n\u2502\xa0\xa0 \u251c\u2500\u2500 e3\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7f3782464ff4e498f4bd98500305503678bcf9\n# highlight-end\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    # highlight-next-line\n    \u2502\xa0\xa0 \u2514\u2500\u2500 master\n    \u2514\u2500\u2500 tags\n\n16 directories, 26 files\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t 07ff67e7d021a547594965b1723252997f07d088\ncommit\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p 07ff67e7d021a547594965b1723252997f07d088\n# highlight-start\ntree 62862ef896e99e31a8ea3fdbbe6c63f1deecc7be\nauthor athomasliz <athomasliz@yahoo.com.hk> 1685166947 +0800\ncommitter athomasliz <athomasliz@yahoo.com.hk> 1685166947 +0800\n\nInitial commit\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t 62862ef896e99e31a8ea3fdbbe6c63f1deecc7be\ntree\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p 62862ef896e99e31a8ea3fdbbe6c63f1deecc7be\n# highlight-start\n100644 blob 557db03de997c86a4a028e1ebd3a1ceb225be238    HelloWorld.txt\n040000 tree e37f3782464ff4e498f4bd98500305503678bcf9    folderA\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t e37f3782464ff4e498f4bd98500305503678bcf9\ntree\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p e37f3782464ff4e498f4bd98500305503678bcf9\n# highlight-start\n100644 blob 557db03de997c86a4a028e1ebd3a1ceb225be238    HelloWorld2.txt\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % cat .git/refs/heads/master\n07ff67e7d021a547594965b1723252997f07d088\nthomasli@Thomas-Lis-MBP illustration1 % cat .git/HEAD\nref: refs/heads/master\n')),(0,l.kt)("h3",{id:"b-untracked-file-vs-tracked-file"},"B. Untracked file vs Tracked file"),(0,l.kt)("h4",{id:"step-1-create-file-in-working-tree"},"Step 1. Create file in working tree"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'thomasli@Thomas-Lis-MBP illustration1 % echo "Happy World" > HappyWorld.txt\nthomasli@Thomas-Lis-MBP illustration1 % git status\nOn branch master\n# highlight-start\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n    HappyWorld.txt\n# highlight-end\n\nnothing added to commit but untracked files present (use "git add" to track)\nthomasli@Thomas-Lis-MBP illustration1 % git diff\n')),(0,l.kt)("h4",{id:"step-2-modify-file-in-working-tree"},"Step 2. Modify file in working tree"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'thomasli@Thomas-Lis-MBP illustration1 % echo "Hello World 2" > HelloWorld.txt\nthomasli@Thomas-Lis-MBP illustration1 % git status\nOn branch master\n# highlight-start\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git restore <file>..." to discard changes in working directory)\n    modified:   HelloWorld.txt\n# highlight-end\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n    HappyWorld.txt\n\nno changes added to commit (use "git add" and/or "git commit -a")\nthomasli@Thomas-Lis-MBP illustration1 % git diff\n# highlight-start\ndiff --git a/HelloWorld.txt b/HelloWorld.txt\nindex 557db03..3ee3849 100644\n--- a/HelloWorld.txt\n+++ b/HelloWorld.txt\n@@ -1 +1 @@\n-Hello World\n+Hello World 2\n# highlight-end\n')),(0,l.kt)("h4",{id:"step-3-add-to-index-tree"},"Step 3. Add to index tree"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'thomasli@Thomas-Lis-MBP illustration1 % git add .\nthomasli@Thomas-Lis-MBP illustration1 % git status\nOn branch master\n# highlight-start\nChanges to be committed:\n  (use "git restore --staged <file>..." to unstage)\n    new file:   HappyWorld.txt\n    modified:   HelloWorld.txt\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git diff\nthomasli@Thomas-Lis-MBP illustration1 % git diff --staged\n# highlight-start\ndiff --git a/HappyWorld.txt b/HappyWorld.txt\nnew file mode 100644\nindex 0000000..674b232\n--- /dev/null\n+++ b/HappyWorld.txt\n@@ -0,0 +1 @@\n+Happy World\ndiff --git a/HelloWorld.txt b/HelloWorld.txt\nindex 557db03..3ee3849 100644\n--- a/HelloWorld.txt\n+++ b/HelloWorld.txt\n@@ -1 +1 @@\n-Hello World\n+Hello World 2\n# highlight-end\n')),(0,l.kt)("h4",{id:"step-4-commit-to-repository"},"Step 4. Commit to repository"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'thomasli@Thomas-Lis-MBP illustration1 % git commit -am "Commit 2" \n[master 90b73b9] Commit 2\n 2 files changed, 2 insertions(+), 1 deletion(-)\n create mode 100644 HappyWorld.txt\nthomasli@Thomas-Lis-MBP illustration1 % git status\n# highlight-start              \nOn branch master\nnothing to commit, working tree clean\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git diff  \nthomasli@Thomas-Lis-MBP illustration1 % git diff --staged\n')),(0,l.kt)("h2",{id:"6-reference"},"6. Reference"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/58003030/what-is-the-git-restore-command-and-what-is-the-difference-between-git-restor"},"https://stackoverflow.com/questions/58003030/what-is-the-git-restore-command-and-what-is-the-difference-between-git-restor")))}p.isMDXComponent=!0}}]);