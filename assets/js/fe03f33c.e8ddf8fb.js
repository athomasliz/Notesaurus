"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[3407],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>u});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),y=l(r),u=o,f=y["".concat(p,".").concat(u)]||y[u]||d[u]||a;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=y;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},969:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:7},i="Node Forge",c={unversionedId:"react-native/framework-library/node-forge",id:"react-native/framework-library/node-forge",title:"Node Forge",description:"A native implementation of TLS, and various other cryptographic tools in JavaScript.",source:"@site/docs/react-native/framework-library/node-forge.md",sourceDirName:"react-native/framework-library",slug:"/react-native/framework-library/node-forge",permalink:"/Notesaurus/docs/react-native/framework-library/node-forge",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/react-native/framework-library/node-forge.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Axios",permalink:"/Notesaurus/docs/react-native/framework-library/axios"},next:{title:"Expo Local Authentication",permalink:"/Notesaurus/docs/react-native/framework-library/expo-local-authentication"}},p={},l=[{value:"Reference",id:"reference",level:2},{value:"Step by Step Guide",id:"step-by-step-guide",level:2},{value:"1. Import key",id:"1-import-key",level:3},{value:"2. (Android Only) Set noCompress for aaptOptions",id:"2-android-only-set-nocompress-for-aaptoptions",level:3},{value:"3. Load key. Perform encryption or decryption",id:"3-load-key-perform-encryption-or-decryption",level:3}],s={toc:l};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"node-forge"},"Node Forge"),(0,o.kt)("p",null,"A native implementation of TLS, and various other cryptographic tools in JavaScript."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"npm install node-forge\n")),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/node-forge"},"Official Site"))),(0,o.kt)("h2",{id:"step-by-step-guide"},"Step by Step Guide"),(0,o.kt)("h3",{id:"1-import-key"},"1. Import key"),(0,o.kt)("p",null,"(Android) Under android/app/src/main/assets/"),(0,o.kt)("h3",{id:"2-android-only-set-nocompress-for-aaptoptions"},"2. (Android Only) Set noCompress for aaptOptions"),(0,o.kt)("p",null,"Otherwise certificate or key will be compressed and cannot be read by RNFetchBlob fs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="android/app/build.gradle"',title:'"android/app/build.gradle"'},'aaptOptions {\n    noCompress "UAT_api_private_key.pem"\n    noCompress "UAT_api_public_key.crt"\n}\n')),(0,o.kt)("h3",{id:"3-load-key-perform-encryption-or-decryption"},"3. Load key. Perform encryption or decryption"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Encryption"',title:'"Encryption"'},'let path = RNFetchBlob.fs.asset("UAT_api_public_key.crt")\nawait fs.readFile(path,\'utf8\')\n.then((data) => {\n    console.log("[Certificate]: "+data);\n    const certificate = forge.pki.certificateFromPem(data);\n    encryptedLogin = certificate.publicKey.encrypt(forge.util.encodeUtf8(encryptedLogin));\n    encryptedPassword = certificate.publicKey.encrypt(forge.util.encodeUtf8(encryptedPassword));\n    encryptedLogin = forge.util.encode64(encryptedLogin);\n    encryptedPassword = forge.util.encode64(encryptedPassword);\n    console.log("[Encrypted Login] " +encryptedLogin);\n    console.log("[Encrypted Password] " +encryptedPassword);\n})\n.catch(e=>console.error(e))\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Decryption"',title:'"Decryption"'},'let path2 = RNFetchBlob.fs.asset("UAT_api_private_key.pem")\nawait fs.readFile(path2,\'utf8\')\n.then((data) => {\n    console.log("[Private Key]: "+data);\n    const privateKey = forge.pki.privateKeyFromPem(data);\n    let decryptedLogin = privateKey.decrypt(forge.util.decode64(encryptedLogin));\n    let decryptedPassword = privateKey.decrypt(forge.util.decode64(encryptedPassword));  \n    console.log("[Decrypted Login] " +decryptedLogin);\n    console.log("[Decrypted Password] " +decryptedPassword);\n})\n.catch(e=>console.error(e))\n')))}d.isMDXComponent=!0}}]);