"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[5832],{3600:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));n(1839);const r={sidebar_position:8},s="Day 7:  Unit Test with Mockito",a={unversionedId:"spring-boot/mockito",id:"spring-boot/mockito",title:"Day 7:  Unit Test with Mockito",description:"Step by Step Guide",source:"@site/docs/spring-boot/mockito.md",sourceDirName:"spring-boot",slug:"/spring-boot/mockito",permalink:"/Notesaurus/docs/spring-boot/mockito",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/spring-boot/mockito.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Day 6:  Secure with TLS",permalink:"/Notesaurus/docs/spring-boot/tls"},next:{title:"Day 0:  Overview",permalink:"/Notesaurus/docs/spring-cloud/overview"}},l={},c=[{value:"Step by Step Guide",id:"step-by-step-guide",level:2},{value:"1. Add starter",id:"1-add-starter",level:3},{value:"2. Test controller with Mockito",id:"2-test-controller-with-mockito",level:3}],h={toc:c};function u(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,o.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-7--unit-test-with-mockito"},"Day 7:  Unit Test with Mockito"),(0,i.kt)("h2",{id:"step-by-step-guide"},"Step by Step Guide"),(0,i.kt)("h3",{id:"1-add-starter"},"1. Add starter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.xml"',title:'"pom.xml"'},"    <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-core</artifactId>\n        <version>4.6.1</version>\n        <scope>test</scope>\n    </dependency>\n")),(0,i.kt)("h3",{id:"2-test-controller-with-mockito"},"2. Test controller with Mockito"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Mockito will create Mock objects and then inject them into LoginController."),(0,i.kt)("li",{parentName:"ul"},"We control the behavior of these mock objects using when ,  then Return."),(0,i.kt)("li",{parentName:"ul"},"Finally we can verify, for example, how many times the mock object has been called.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="oorg.irushu.login.ControllerTests" showLineNumbers',title:'"oorg.irushu.login.ControllerTests"',showLineNumbers:!0},'@ExtendWith(MockitoExtension.class)\npublic class ControllerTests {\n    {/* highlight-start */}\n    @Mock\n    {/* highlight-end */}\n    JWTService jwtService;\n\n    {/* highlight-start */}\n    @Mock\n    {/* highlight-end */}\n    AuthenticationManager authenticationManager;\n\n    {/* highlight-start */}\n    @InjectMocks\n    {/* highlight-end */}\n    private LoginController loginController;\n\n    @Test\n    void testControllers(){\n        {/* highlight-start */}\n        when(authenticationManager.authenticate(any())).thenReturn(new Authentication(){ ... });\n\n        when(jwtService.getToken(any())).thenReturn(new JWTService().getToken(any()));\n        {/* highlight-end */}\n\n        ResponseEntity entity = loginController.getToken(new UserCredentials("thomasli", "password"));\n\n        {/* highlight-start */}\n        verify(jwtService,times(1)).getToken(anyString());\n        {/* highlight-end */}\n\n        assertNotEquals( List.of("Bearer null"), entity.getHeaders().get("Authorization"));\n        \n    }\n')))}u.isMDXComponent=!0}}]);