"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[5013],{6106:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var a=t(5893),i=t(1151);const r={sidebar_position:1},c="Native Bridging",s={id:"react-native/Miscellaneous/native-bridging",title:"Native Bridging",description:"iOS",source:"@site/docs/react-native/Miscellaneous/native-bridging.md",sourceDirName:"react-native/Miscellaneous",slug:"/react-native/Miscellaneous/native-bridging",permalink:"/Notesaurus/docs/react-native/Miscellaneous/native-bridging",draft:!1,unlisted:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/react-native/Miscellaneous/native-bridging.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Debug and Monitor",permalink:"/Notesaurus/docs/react-native/command-tools/debugging-development-tool"},next:{title:"Suppress SSL",permalink:"/Notesaurus/docs/react-native/Miscellaneous/suppress-ssl"}},l={},o=[{value:"iOS",id:"ios",level:2},{value:"React Native calls Native",id:"react-native-calls-native",level:3},{value:"Android",id:"android",level:2},{value:"React Native calls Native",id:"react-native-calls-native-1",level:3},{value:"Native calls React Native",id:"native-calls-react-native",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"native-bridging",children:"Native Bridging"}),"\n",(0,a.jsx)(n.h2,{id:"ios",children:"iOS"}),"\n",(0,a.jsx)(n.h3,{id:"react-native-calls-native",children:"React Native calls Native"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Write the native module and method"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-objc",metastring:'title="/ios/xxxApp/ShareToApp.h"',children:"#import <React/RCTBridgeModule.h>\n@interface ShareToApp : NSObject <RCTBridgeModule>\n@end\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-objc",metastring:'title="/ios/xxxApp/ShareToApp.m"',children:'#import "ShareToApp.h"\n#import "AppDelegate.h"\n@implementation ShareToApp\n\nRCT_EXPORT_MODULE();\n\nRCT_EXPORT_METHOD(openFPSBankingApp)\n{\ndispatch_async(dispatch_get_main_queue(), ^{\nAppDelegate *delegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];\nNSExtensionItem *item = [[NSExtensionItem alloc] init];\nNSItemProvider *provide = [[NSItemProvider alloc] initWithItem:data typeIdentifier:@"hk.com.hkicl"];\nitem.attachments = @[provide];\nUIActivityViewController *ActivityView = [[UIActivityViewController alloc] initWithActivityItems:@[item] applicationActivities:nil];\n[delegate.window.rootViewController presentViewController:ActivityView animated:YES completion:nil];\n});\n}\n@end\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Call the native module and method in React Native"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="/src/screens/sandbox/SandBoxScreen.js"',children:"import { NativeModules } from 'react-native'\n...\nconst invokeFPSBankingApp = async () => {\n    try {\n        if (Platform.OS === 'android') {\n        ...\n        } \n        else {\n            NativeModules.ShareToApp.openFPSBankingApp()\n        }\n    } catch (error) {\n        Alert.alert(error.message)\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"android",children:"Android"}),"\n",(0,a.jsx)(n.h3,{id:"react-native-calls-native-1",children:"React Native calls Native"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Write the native module and method"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="/android/app/java/com/xxx/StockDataPackage.java"',children:"public class StockDataPackage implements ReactPackage {\n\n    @Override\n    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {\n        return Collections.emptyList();\n    }\n\n    @Override\n    public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {\n        List<NativeModule> modules = new ArrayList<>();\n        modules.add(new StockDataModule(reactContext));\n        return modules;\n    }\n\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="/android/app/java/com/xxx/StockDataModule.java"',children:'public class StockDataModule extends ReactContextBaseJavaModule {\n\n    @ReactMethod\n    public void openFPSBankingApp(Callback successCallback) {\n        try {\n\n            Intent intent = new Intent("hk.com.hkicl");\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            Activity currentActivity = getCurrentActivity();\n            if (currentActivity != null) {\n                currentActivity.startActivity(Intent.createChooser(intent, "Choose FPS BankingApp"));\n            }\n            successCallback.invoke(null, true);\n        }\n        catch(Exception t) {\n            successCallback.invoke(null, t.getMessage() + t.toString());\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="/android/app/java/com/xxx/MainApplication.java"',children:'public class MainApplication extends Application implements ReactApplication {\n    private final ReactNativeHost mReactNativeHost =\n        new ReactNativeHost(this) {\n        ...\n            @Override\n            protected List<ReactPackage> getPackages() {\n                @SuppressWarnings("UnnecessaryLocalVariable")\n                List<ReactPackage> packages = new PackageList(this).getPackages();\n            \n                ...\n                packages.add(new StockDataPackage());\n        \n                ...\n                return packages;\n            }\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Call the native module and method in React Native"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="/src/screens/sandbox/SandBoxScreen.js"',children:"import { NativeModules } from 'react-native'\n...\nconst invokeFPSBankingApp = async () => {\n    try {\n        if (Platform.OS === 'android') {\n            NativeModules.StockDataService.openFPSBankingApp((error, status) => {\n                console.log('StockDataService openFPSBankingApp: ' + status)\n            })\n        } \n        else {\n            ...\n        }\n    } catch (error) {\n        Alert.alert(error.message)\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"native-calls-react-native",children:"Native calls React Native"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Android Service emits event with params"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="/android/app/java/com/xxx/StockDataService.java"',children:'...\nprivate Runnable runnableCode = new Runnable() {\n    @Override\n    public void run() {\n        if (Looper.myLooper() == null) {\n            Looper.prepare();\n        }\n        MainApplication mainApplication = (MainApplication) getApplicationContext();\n\n        WritableMap params = Arguments.createMap();\n        Date date = new Date(System.currentTimeMillis());\n        params.putString("currentTime", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date));\n        mainApplication.getReactNativeHost().getReactInstanceManager().getCurrentReactContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit("StockData",params);\n        handler.postDelayed(this, 2000);\n    }\n};\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"React Native creates a nativeEventEmitter that will listen to event"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="/src/screens/sandbox/SandBoxScreen.js"',children:"import { NativeEventEmitter } from 'react-native'\n...\nconst SandBoxScreen = ({ navigation }) => {\n...\n    if (Platform.OS === 'android') {\n        React.useEffect(() => {\n            const eventEmitter = new NativeEventEmitter(NativeModules.ToastExample)\n            eventEmitter.addListener('StockData', callbackCurrentTime)\n            return () => {\n                eventEmitter.removeAllListeners('StockData', callbackCurrentTime) // remove Listener when unmounting the component\n            }\n        }, []) // Empty Effect will trigger only once\n    }\n}\n"})}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>c});var a=t(7294);const i={},r=a.createContext(i);function c(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);