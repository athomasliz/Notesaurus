"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[6788],{1866:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var l=t(7462),n=(t(7294),t(3905));t(1839);const i={sidebar_position:2},r="Core Java",o={unversionedId:"java/core",id:"java/core",title:"Core Java",description:"Below notes are based on the book OCP Oracle Certified Professional Java SE 17 Developer Study Guide",source:"@site/docs/java/core.md",sourceDirName:"java",slug:"/java/core",permalink:"/Notesaurus/docs/java/core",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/java/core.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"JVM",permalink:"/Notesaurus/docs/java/jvm"},next:{title:"Misc",permalink:"/Notesaurus/docs/java/misc"}},s={},p=[{value:"Building Blocks",id:"building-blocks",level:2},{value:"Environment",id:"environment",level:3},{value:"Class Structure",id:"class-structure",level:3},{value:"Fields and Methods",id:"fields-and-methods",level:4},{value:"Classes and Source Files",id:"classes-and-source-files",level:4},{value:"main() method",id:"main-method",level:4},{value:"Packages and Imports",id:"packages-and-imports",level:3},{value:"Compilation, Execution and JAR files",id:"compilation-execution-and-jar-files",level:3},{value:"Ordering elements in a class",id:"ordering-elements-in-a-class",level:3},{value:"Creating Objects",id:"creating-objects",level:3},{value:"Data Types",id:"data-types",level:3}],m={toc:p};function c(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,l.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"core-java"},"Core Java"),(0,n.kt)("p",null,"Below notes are based on the book ",(0,n.kt)("em",{parentName:"p"},"OCP Oracle Certified Professional Java SE 17 Developer Study Guide")),(0,n.kt)("h2",{id:"building-blocks"},"Building Blocks"),(0,n.kt)("h3",{id:"environment"},"Environment"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"JDK"),": Java Development Kit",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"javac"),": Convert .java (source file) into .class (bytecode)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"java"),": Execute"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"jar"),": Package"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"javadoc"),": Document"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"JRE"),": Java Runtime Environment",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"subset of JDK"),(0,n.kt)("li",{parentName:"ul"},"could not compile"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"IDE"),": Integrated Development Environment")),(0,n.kt)("h3",{id:"class-structure"},"Class Structure"),(0,n.kt)("h4",{id:"fields-and-methods"},"Fields and Methods"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Methods",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"a.k.a. functions / procedures in other languages"))),(0,n.kt)("li",{parentName:"ol"},"Fields",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"variables"))),(0,n.kt)("li",{parentName:"ol"},"Methods and Fields are ",(0,n.kt)("strong",{parentName:"li"},"members")," of the class."),(0,n.kt)("li",{parentName:"ol"},"void",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"special return type"),(0,n.kt)("li",{parentName:"ul"},"no value at all is returned"))),(0,n.kt)("li",{parentName:"ol"},"Method name and parameter types are called the ",(0,n.kt)("strong",{parentName:"li"},"method signature"),".")),(0,n.kt)("h4",{id:"classes-and-source-files"},"Classes and Source Files"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Class is the top level type"),(0,n.kt)("li",{parentName:"ol"},"You can put two or more classes in a file"),(0,n.kt)("li",{parentName:"ol"},"At most one of the top level type is allowed to be public"),(0,n.kt)("li",{parentName:"ol"},"If you have a public top level type, it must match the filename")),(0,n.kt)("h4",{id:"main-method"},"main() method"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"main() method for execution of the program",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"public static void main(String[] args)\npublic static void main(String args[])\npublic static void main(String... args)\nfinal public static void main(String... args)\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"public as access modifier"),(0,n.kt)("li",{parentName:"ul"},"static as no object is created"),(0,n.kt)("li",{parentName:"ul"},"... are called ",(0,n.kt)("inlineCode",{parentName:"li"},"varargs")," variable argument lists"))),(0,n.kt)("li",{parentName:"ol"},"Compile and execute as follow",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"javac Test.java\njava Test    \n"))),(0,n.kt)("li",{parentName:"ol"},"File must have extention .java"),(0,n.kt)("li",{parentName:"ol"},"Result of compilation is .class file"),(0,n.kt)("li",{parentName:"ol"},"Shortcut for single file source code",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"java Test.java\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Skip explicit compilation steps"),(0,n.kt)("li",{parentName:"ul"},"This feature is called launching single-file source code programs"),(0,n.kt)("li",{parentName:"ul"},"This feature is designed for when your program is one file")))),(0,n.kt)("h3",{id:"packages-and-imports"},"Packages and Imports"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Packages is the logical grouping for classes"),(0,n.kt)("li",{parentName:"ol"},"Package name are hierarchical, separated by period (.)"),(0,n.kt)("li",{parentName:"ol"},"Directory structure is related to the package name"),(0,n.kt)("li",{parentName:"ol"},"Use import statement to tell Java which package to look in for classes"),(0,n.kt)("li",{parentName:"ol"},"You can import all the classes of package with wildcard *"),(0,n.kt)("li",{parentName:"ol"},"Wildcard can help shorten import list"),(0,n.kt)("li",{parentName:"ol"},"Import a lot of classes will not slow down execution time. So don't worry."),(0,n.kt)("li",{parentName:"ol"},"Below are import limitations",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"wildcard can only match class names, but not directory/paths"),(0,n.kt)("li",{parentName:"ul"},"can only have 1 wildcard, and it must be placed at the end"),(0,n.kt)("li",{parentName:"ul"},"can only match class names, not method"))),(0,n.kt)("li",{parentName:"ol"},"Naming conflicts",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Class names don't have to be unique across all of Java"),(0,n.kt)("li",{parentName:"ul"},"The class name you imported are therefore can be found in multiple places"),(0,n.kt)("li",{parentName:"ul"},"Explicitly importing a class name will take precedence over any wildcard present",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"import java.util.Date; // This will win\nimport java.sql.*;\n"))),(0,n.kt)("li",{parentName:"ul"},"In case you need a class name, e.g. Date, from 2 different packages, use ",(0,n.kt)("em",{parentName:"li"},"fully qualified class name"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"java.util.Date utilDate;\njava.sql.Date sqlDate;\n")))))),(0,n.kt)("h3",{id:"compilation-execution-and-jar-files"},"Compilation, Execution and JAR files"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"You can compile as below",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"javac org/irushu/test/Test.java\njavac org/irushu/test/*.java\njavac *.java // This won't compile the source file in package org.irush.test\n"))),(0,n.kt)("li",{parentName:"ol"},"You can compile and placed the class files in different directory",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"javac -d classes org/irushu/test/Test.java\n"))),(0,n.kt)("li",{parentName:"ol"},"You can specify the classpath for needed libraries to compile the program"),(0,n.kt)("li",{parentName:"ol"},"You can specify the classpath and run the program",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"java -cp classes org.irushu.test.Test\njava -classpath classes org.irushu.test.Test\njava --class-path classes org.irushu.test.Test\n"))),(0,n.kt)("li",{parentName:"ol"},"You can create jar file as below",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"jar -cvf test.jar .\njar -cvf test.jar -C classes . // -C specify the location that contains the class files\njar --create --verbose --file test.jar .\n")))),(0,n.kt)("h3",{id:"ordering-elements-in-a-class"},"Ordering elements in a class"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Order as below",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Package declaration"),(0,n.kt)("li",{parentName:"ol"},"Import statement"),(0,n.kt)("li",{parentName:"ol"},"Top level type declaration (Class / Interface / Enum)"),(0,n.kt)("li",{parentName:"ol"},"Field declaration"),(0,n.kt)("li",{parentName:"ol"},"Method declaration")))),(0,n.kt)("h3",{id:"creating-objects"},"Creating Objects"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"You can define Constructor for later creation of objects"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"public class Test{\n    public Test(){\n\n    }\n}\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Constructor does not have return type")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"If you don't specify a constructor, compiler will supply a do nothing default constructor for you")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"You can create object with new keyword"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"Test test = new Test();\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"One can read and write instance variables directly from the caller. However, one should honour encapsulation and protect instance variables with access modifier."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'public class Test{\n    String helloWorld = "Hello World";\n    public static void main(String... args){\n        Test test = new Test();\n        test.helloWorld = "Happy Valley";\n    }\n}\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"You can define ",(0,n.kt)("strong",{parentName:"p"},"Instance initializer")," as below"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'public class Test{\n   {\n    System.out.println("Test");\n    }\n}\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Order of execution"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Fields and Instance Initializer run in the order they appeared in the file"),(0,n.kt)("li",{parentName:"ul"},"Constructor"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Order matters and you can't refer to a variable before it has been defined"))),(0,n.kt)("h3",{id:"data-types"},"Data Types"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"8 primitive types",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"byte (8), short (16), int (32), long (64)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"signed"),(0,n.kt)("li",{parentName:"ul"},"each numeric type is twice the size as the smaller similar type"))),(0,n.kt)("li",{parentName:"ul"},"float (32), double (64)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"signed"),(0,n.kt)("li",{parentName:"ul"},"each decimal type is twice the size as the smaller similar type"))),(0,n.kt)("li",{parentName:"ul"},"char (8)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"unsigned"),(0,n.kt)("li",{parentName:"ul"},"short and char values can be casted to one another as the underlying data size is the same"))),(0,n.kt)("li",{parentName:"ul"},"boolean ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"bit size depends on JVM implementation"))))),(0,n.kt)("li",{parentName:"ol"},"By default java interprets numeric value as int if l or L is not specified for long type."),(0,n.kt)("li",{parentName:"ol"},"By default java interprets decimal value as double if f or F is not specified for float type."),(0,n.kt)("li",{parentName:"ol"},"When a number is present in the code, it is called a ",(0,n.kt)("strong",{parentName:"li"},"literal"),"."),(0,n.kt)("li",{parentName:"ol"},"One can specify a number by ",(0,n.kt)("strong",{parentName:"li"},"changing base"),". By default it is using decimal number system.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"octal (0-7): 017"),(0,n.kt)("li",{parentName:"ul"},"Hexadecimal (0-9 a-f A-F): 0xFF"),(0,n.kt)("li",{parentName:"ul"},"Binary (0-1): 0B101"))),(0,n.kt)("li",{parentName:"ol"},"You can have underscores in numbers. ",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"int value = 1_000_000;\n"))),(0,n.kt)("li",{parentName:"ol"},"You cannot have underscore at the beginning or end of a literal, or right before or after a decimal point.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"double a = _1000.00;          // CANNOT COMPILE\ndouble b = 1000.00_;          // CANNOT COMPILE\ndouble c = 1000._00;          // CANNOT COMPILE\ndouble d = 1000_.00;          // CANNOT COMPILE\n")))))}c.isMDXComponent=!0}}]);