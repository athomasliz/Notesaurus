"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[6438],{9796:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>m,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>x});var t=n(5893),s=n(1151),r=n(6387),l=n(1333),d=(n(7294),n(2969));function h(e){let{children:i}=e;return(0,t.jsxs)(d.Z,{bgColor:"#000000",fontColor:"#ffffff",fontWeight:"400",border:"1px solid #ffffff",borderRadius:"0",padding:"0.75rem",margin:"0.25rem",display:"block",children:[(0,t.jsx)("b",{children:">"})," ",i]})}const a={sidebar_position:99},c="GIT",o={id:"git",title:"GIT",description:"1. Command for enquiry",source:"@site/docs/git.mdx",sourceDirName:".",slug:"/git",permalink:"/Notesaurus/docs/git",draft:!1,unlisted:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/git.mdx",tags:[],version:"current",sidebarPosition:99,frontMatter:{sidebar_position:99},sidebar:"tutorialSidebar",previous:{title:"Docker 101",permalink:"/Notesaurus/docs/docker/"}},m={},x=[{value:"1. Command for enquiry",id:"1-command-for-enquiry",level:2},{value:"2. Command for action",id:"2-command-for-action",level:2},{value:"3. Plumbing Command",id:"3-plumbing-command",level:2},{value:"4. Terminology and Concepts",id:"4-terminology-and-concepts",level:2},{value:"5. Globbing pattern for .gitignore",id:"5-globbing-pattern-for-gitignore",level:2},{value:"6. Illustration",id:"6-illustration",level:2},{value:"A. GIT as an object store",id:"a-git-as-an-object-store",level:3},{value:"Step 1. Init the repository",id:"step-1-init-the-repository",level:4},{value:"Step 2. Create file in working tree",id:"step-2-create-file-in-working-tree",level:4},{value:"Step 3. Add file to index tree",id:"step-3-add-file-to-index-tree",level:4},{value:"Step 4. Create another folder and file (With the same content) and add to index tree",id:"step-4-create-another-folder-and-file-with-the-same-content-and-add-to-index-tree",level:4},{value:"Step 5. Commit the changes to repository",id:"step-5-commit-the-changes-to-repository",level:4},{value:"B. Untracked file vs Tracked file",id:"b-untracked-file-vs-tracked-file",level:3},{value:"Step 1. Create a new file in working tree",id:"step-1-create-a-new-file-in-working-tree",level:4},{value:"Step 2. Modify an existing file in working tree",id:"step-2-modify-an-existing-file-in-working-tree",level:4},{value:"Step 3. Add to index tree",id:"step-3-add-to-index-tree",level:4},{value:"Step 4. Commit to repository",id:"step-4-commit-to-repository",level:4},{value:"C. Branching and Merging",id:"c-branching-and-merging",level:3},{value:"Step 1. Create a branch",id:"step-1-create-a-branch",level:4},{value:"Step 2. Add and commit file to master",id:"step-2-add-and-commit-file-to-master",level:4},{value:"Step 3. Add and commit file to branch1",id:"step-3-add-and-commit-file-to-branch1",level:4},{value:"Step 4. Merge branch1 to master",id:"step-4-merge-branch1-to-master",level:4},{value:"7. Reference",id:"7-reference",level:2}];function j(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"git",children:"GIT"}),"\n",(0,t.jsx)(i.h2,{id:"1-command-for-enquiry",children:"1. Command for enquiry"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:(0,t.jsx)(i.strong,{children:"Command"})}),(0,t.jsx)(i.th,{children:(0,t.jsx)(i.strong,{children:"Description"})})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git --version"})}),(0,t.jsx)(i.td,{children:"Show version"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git help --all"})}),(0,t.jsx)(i.td,{children:"Complete list of git subcommands"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git ",(0,t.jsx)(r.Z,{children:"subcommand"})," --help"]})}),(0,t.jsx)(i.td,{children:"Documentation for each subcommand"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git config -l --show-scope --show-origin"})}),(0,t.jsx)(i.td,{children:"List the settings of all variables"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git show-branch --more=50"})}),(0,t.jsx)(i.td,{children:"Show all the commits in reverse order"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git show-branch 'bug/*'"})}),(0,t.jsx)(i.td,{children:"Show all the commits of specified branches"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git status"})}),(0,t.jsx)(i.td,{children:"Query the status of the index"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git log --oneline"})}),(0,t.jsxs)(i.td,{children:[(0,t.jsx)(i.strong,{children:"--oneline"}),' is a shorthand for "--pretty=oneline --abbrev-commit"']})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git log --oneline --graph --decorate"})}),(0,t.jsxs)(i.td,{children:[(0,t.jsx)(i.strong,{children:"--graph"})," visualize the forks from a commit and the point in which branches merge"]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git log -n"})}),(0,t.jsx)(i.td,{children:"Limit the range to n"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git log 7a4d4b1...1457b0"})}),(0,t.jsx)(i.td,{children:"show commit history from 7a4d4b1 (exclude) to 1457b0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git log -1 -p --stat ",(0,t.jsx)(r.Z,{children:"commit id"})]})}),(0,t.jsxs)(i.td,{children:[(0,t.jsx)(i.strong,{children:"-p"})," will print the patch",(0,t.jsx)("br",{}),(0,t.jsx)(i.strong,{children:"--stat"})," will provide a tally of how many lines were modified"]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git log --format=",(0,t.jsx)(r.Z,{children:"build-in formats"})]})}),(0,t.jsx)(i.td,{children:"oneline, short, medium, full, fuller, raw"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git log --follow ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Track back through the log the full history of file"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git show ",(0,t.jsx)(r.Z,{children:"commit id"})]})}),(0,t.jsx)(i.td,{children:"Show the content for a commit"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git show ",(0,t.jsx)(r.Z,{children:"commit id"})," --name-only"]})}),(0,t.jsx)(i.td,{children:"Show the file name list for a commit"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git diff"})}),(0,t.jsx)(i.td,{children:"Working Tree VS Staging Area"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git diff --cached"})}),(0,t.jsx)(i.td,{children:"Staging Area VS HEAD"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git diff --name-status ",(0,t.jsx)(r.Z,{children:"branch 1"})," ",(0,t.jsx)(r.Z,{children:"branch 2"})]})}),(0,t.jsx)(i.td,{})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git reflog ",(0,t.jsx)(r.Z,{children:"ref such as HEAD, master"})]})}),(0,t.jsxs)(i.td,{children:["Records what happens in the repository",(0,t.jsx)("br",{})," while you commit, reset, check out",(0,t.jsx)("br",{}),"(show is the default, see other subcommands)"]})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"2-command-for-action",children:"2. Command for action"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:(0,t.jsx)(i.strong,{children:"Command"})}),(0,t.jsx)(i.th,{children:(0,t.jsx)(i.strong,{children:"Description"})})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git clone ",(0,t.jsx)(r.Z,{children:"repository"})]})}),(0,t.jsx)(i.td,{children:"Clone a repository into a new directory"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git config --global ",(0,t.jsx)(r.Z,{children:"options"})," ",(0,t.jsx)(r.Z,{children:"value"})]})}),(0,t.jsx)(i.td,{children:"Get and set repository or global options"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git config --unset --global user.email"})}),(0,t.jsx)(i.td,{children:"Remove a setting from the configuration"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git init"})}),(0,t.jsxs)(i.td,{children:["Init a repository",(0,t.jsx)("br",{}),"(Used on your computer)"]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git init --bare"})}),(0,t.jsxs)(i.td,{children:["Init a repository without a working copy",(0,t.jsx)("br",{}),"(Used on the server)"]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git add ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Add the file to the index"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git add -n ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Dry run. Dont actually add, just show"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git rm --cached ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Removes the file from index (not working tree)"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git rm ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Removes the file from index and working tree"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git mv ",(0,t.jsx)(r.Z,{children:"original file"})," ",(0,t.jsx)(r.Z,{children:"new file"})]})}),(0,t.jsx)(i.td,{children:"Moves the file to new location"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:'git commit -am "Add an orange"'})}),(0,t.jsx)(i.td,{children:"Record change to repository"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git push"})}),(0,t.jsx)(i.td,{children:"Update remote refs along with associated objects"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git push --force-with-lease"})}),(0,t.jsx)(i.td,{})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git pull"})}),(0,t.jsx)(i.td,{children:"Fetch from and integrate with another repository"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git fetch --all"})}),(0,t.jsx)(i.td,{children:"Download objects and refs from another repository"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git checkout ",(0,t.jsx)(r.Z,{children:"branch name"})]})}),(0,t.jsx)(i.td,{children:'Move to Branch "branch-name"'})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git checkout ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Check out a particular file from index to working directory"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git checkout HEAD^"})}),(0,t.jsxs)(i.td,{children:["Move to Detached HEAD state. ",(0,t.jsx)("br",{}),"Being in this state basically means that",(0,t.jsx)("br",{})," HEAD does not reference a branch"]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git branch ",(0,t.jsx)(r.Z,{children:"new branch"})," ",(0,t.jsx)(r.Z,{children:"branch name"})]})}),(0,t.jsxs)(i.td,{children:["Create new branch using the specified existing branch.",(0,t.jsx)("br",{})," If not specified, HEAD of currently active branch."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git branch -d ",(0,t.jsx)(r.Z,{children:"branch name"})]})}),(0,t.jsx)(i.td,{children:'Delete Branch "branch-name"'})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git branch -D ",(0,t.jsx)(r.Z,{children:"branch name"})]})}),(0,t.jsx)(i.td,{children:'Force Delete Branch "branch-name"'})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git branch -m ",(0,t.jsx)(r.Z,{children:"old branch name"})," ",(0,t.jsx)(r.Z,{children:"new branch name"})]})}),(0,t.jsx)(i.td,{children:"Rename a Git repository\u2019s branch name"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(l.Z,{children:"git reset"})}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Updating your branch."}),(0,t.jsx)("li",{children:"Moving the tip to add or remove commits from the branch."}),(0,t.jsx)("li",{children:"This operation changes the commit history."}),(0,t.jsx)("li",{children:"Can be used to restore the index, overlapping with git restore."})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git reset"})}),(0,t.jsxs)(i.td,{children:["Undo all the changes from the index.",(0,t.jsx)("br",{}),"Keep all the changes in working tree."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git reset --hard ",(0,t.jsx)(r.Z,{children:"commit id"})]})}),(0,t.jsx)(i.td,{children:'Moves current branch to this "commitId"'})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git reset --hard master"})}),(0,t.jsxs)(i.td,{children:["Moves current branch to master ",(0,t.jsx)("a",{href:"https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified",children:"Read"})]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git reset ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsxs)(i.td,{children:["Undo the add from the index.",(0,t.jsx)("br",{}),"Keep the change in working tree."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(l.Z,{children:"git restore"})}),(0,t.jsxs)(i.td,{children:["Restoring files in the working tree from either the index or another commit.",(0,t.jsx)("br",{}),"Does not update your branch.",(0,t.jsx)("br",{}),"Can also be used to restore files in the index from another commit."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git restore ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Restore content of working tree from the index"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git restore -s ",(0,t.jsx)(r.Z,{children:"commit id"})," ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Restore content of working tree from the specified commit Id"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git restore --staged ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Restore content of index tree from HEAD"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git restore --staged --worktree ",(0,t.jsx)(r.Z,{children:"file path"})]})}),(0,t.jsx)(i.td,{children:"Restore both content of index tree and working tree from HEAD"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(l.Z,{children:"git revert"})}),(0,t.jsx)(i.td,{children:"Making a new commit that reverts the changes made by other commits."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git revert ",(0,t.jsx)(r.Z,{children:"commit id"})]})}),(0,t.jsx)(i.td,{children:"Remove the change of the specified commit Id and create a new commit"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git revert --no-commit ",(0,t.jsx)(r.Z,{children:"commit id"})]})}),(0,t.jsx)(i.td,{children:"Remove the change of the specified commit Id without commit"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git rebase ",(0,t.jsx)(r.Z,{children:"branch A"})]})}),(0,t.jsx)(i.td,{children:"Rebase the current branch on top of branch A"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git rebase -i HEAD~",(0,t.jsx)(r.Z,{children:"N"})]})}),(0,t.jsxs)(i.td,{children:["Merge several commit into 1",(0,t.jsx)("br",{}),"i means interactive, while the HEAD~N argument means",(0,t.jsx)("br",{})," I want to rebase the last N commits"]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git merge ",(0,t.jsx)(r.Z,{children:"branch name"})]})}),(0,t.jsx)(i.td,{children:"merge the branch into the master one"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git merge --abort"})}),(0,t.jsxs)(i.td,{children:["Abort the current merge operation.",(0,t.jsx)("br",{}),"Restores both working and index tree"]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git cherry-pick\xa0",(0,t.jsx)(r.Z,{children:"commit id"})]})}),(0,t.jsx)(i.td,{children:"cherry-pick a particular commit"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git cherry-pick\xa0--no-commit ",(0,t.jsx)(r.Z,{children:"commit id"})]})}),(0,t.jsx)(i.td,{children:"cherry-pick a particular commit without commit"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git remote -v"})}),(0,t.jsx)(i.td,{children:"Manage set of tracked"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git tag -a annotatedTag ",(0,t.jsx)(r.Z,{children:"commit id"})]})}),(0,t.jsx)(i.td,{})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"3-plumbing-command",children:"3. Plumbing Command"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:(0,t.jsx)(i.strong,{children:"Command"})}),(0,t.jsx)(i.th,{children:(0,t.jsx)(i.strong,{children:"Description"})})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git cat-file -t ",(0,t.jsx)(r.Z,{children:"object id"})]})}),(0,t.jsx)(i.td,{children:"Show the type of the object"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsxs)(h,{children:["git cat-file -p ",(0,t.jsx)(r.Z,{children:"object id"})]})}),(0,t.jsxs)(i.td,{children:["Unzip and cat the file",(0,t.jsx)("br",{}),"-p means pretty-print"]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:'echo "banana"| git hash-object --stdin'})}),(0,t.jsx)(i.td,{children:"Turns the string into hash code"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git ls-files -s"})}),(0,t.jsx)(i.td,{children:"Show files in the index and the working tree"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git rev-parse main~2"})}),(0,t.jsx)(i.td,{children:"translate names to commit id"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git write-tree"})}),(0,t.jsx)(i.td,{children:"Create a tree object from the current index"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git commit-tree"})}),(0,t.jsx)(i.td,{children:"Create a new commit object"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git check-ref-format --branch 'sfx234&(##$#%^#^$'"})}),(0,t.jsx)(i.td,{children:"Ensures that a branch name is well formed"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"git symbolic-ref"})}),(0,t.jsx)(i.td,{children:"Read, modify and delete symbolic refs"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"cat .git/refs/heads/main"})}),(0,t.jsx)(i.td,{children:"Location of Reference file"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(h,{children:"tree .git"})}),(0,t.jsx)(i.td,{})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"4-terminology-and-concepts",children:"4. Terminology and Concepts"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:(0,t.jsx)(i.strong,{children:"Terminology"})}),(0,t.jsx)(i.th,{children:(0,t.jsx)(i.strong,{children:"Description"})})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Repository"}),(0,t.jsx)(i.td,{children:(0,t.jsx)("ul",{children:(0,t.jsx)("li",{children:"a.k.a HEAD"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Index tree"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"a.k.a Staging tree, Staging directory, Index, Index directory, etc"}),(0,t.jsx)("li",{children:"Dynamic stage between working tree and repository"}),(0,t.jsx)("li",{children:"Cached representation of all blob objects"}),(0,t.jsx)("li",{children:"Allow you to alter the content of the index (git add, restore)"}),(0,t.jsx)("li",{children:"Finer control over what content will be stored in the next commit"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Working tree"}),(0,t.jsx)(i.td,{children:(0,t.jsx)("ul",{children:(0,t.jsx)("li",{children:"a.k.a Working directory"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:".git folder"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Hidden subdirectory at the root of working directory."}),(0,t.jsx)("li",{children:"Maintains data structures such as object store, index, ref, etc"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Object Store"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Git stores file content as object"}),(0,t.jsx)("li",{children:"Does not include metadata such as pathname, filename, time"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Content-Addressable"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"GIT stores key-value pairs of each object"}),(0,t.jsx)("li",{children:"Key = SHA1 applied to content of object"}),(0,t.jsx)("li",{children:"Value = Compressed Blob object (Packfile)"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"SHA1"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Use to calculate the hash of an object (File Content)"}),(0,t.jsx)("li",{children:"160 bits, 40 digit hexadecimal number"}),(0,t.jsx)("li",{children:"Always compute the same ID for identical content"}),(0,t.jsx)("li",{children:"Effective global unique identifier for the object"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"4 object types"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Blobs"}),(0,t.jsx)("li",{children:"Trees"}),(0,t.jsx)("li",{children:"Commits"}),(0,t.jsx)("li",{children:"Tags"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Blobs"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Binary files"}),(0,t.jsx)("li",{children:"Contain any data"}),(0,t.jsx)("li",{children:"Treated as opaque: Internal structure ignored by GIT"}),(0,t.jsx)("li",{children:"Does not contain any metadata about the file and its name"}),(0,t.jsx)("li",{children:"Everything is compressed into a blob before archiving it into Git"}),(0,t.jsx)("li",{children:"An object will always have the same hash (SHA-1) anywhere."}),(0,t.jsx)("li",{children:"Different names and paths but with identical content --\x3e Same blob."})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Trees"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"A tree object represents one level of directory information"}),(0,t.jsx)("li",{children:"Records blob identifiers, pathnames, and metadata"}),(0,t.jsx)("li",{children:"Recursively reference other tree objects and build a complete hierarchy"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Commits"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Holds metadata for each change"}),(0,t.jsx)("li",{children:"Metadata includes author, committer, commit date, and log message"}),(0,t.jsx)("li",{children:"Points to a tree object that captures snapshot"}),(0,t.jsx)("li",{children:"Initial commit has no parent."}),(0,t.jsx)("li",{children:"Usually 1 parent only."}),(0,t.jsx)("li",{children:"Merge results in more than 1 parent."})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Tags"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:["Refer to ",(0,t.jsx)(i.code,{children:"annotated tag"}),", not ",(0,t.jsx)(i.code,{children:"lightweight tag"})," here"]}),(0,t.jsx)("li",{children:"Human-readable name to a specific object"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Packfile"}),(0,t.jsx)(i.td,{children:(0,t.jsx)("ul",{children:(0,t.jsx)("li",{children:"GIT compresses and stores objects in packfiles"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"No Delta"}),(0,t.jsx)(i.td,{children:(0,t.jsx)("ul",{children:(0,t.jsx)("li",{children:"Every commit is a snapshot of the entire repository."})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Unreachable commits"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Won't delete unreachable commits immediately"}),(0,t.jsx)("li",{children:"Housekeeping automatically at a given time"}),(0,t.jsx)("li",{children:"GIT has garbage collection features"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Explicit reference"}),(0,t.jsx)(i.td,{children:(0,t.jsx)("ul",{children:(0,t.jsx)("li",{children:"SHA1 hash identifier"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Implicit reference"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"refs: Local branch names, tag names"}),(0,t.jsxs)("li",{children:["symrefs: regular file that stores a string that begins with ref: refs/",(0,t.jsx)("br",{}),"refs/heads/ref",(0,t.jsx)("br",{}),"refs/remotes/ref",(0,t.jsx)("br",{}),"refs/tags/ref"]}),(0,t.jsx)("li",{children:"relative commit names: HEAD^2"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"^ caret"}),(0,t.jsx)(i.td,{children:(0,t.jsx)("ul",{children:(0,t.jsx)("li",{children:"main^n means the nth parent of main branch"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"~ tilde"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Go back before an ancestral parent and select a preceding generation"}),(0,t.jsx)("li",{children:"Always refers to the first parent"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:".gitignore"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Skip any file defined in it"}),(0,t.jsxs)("li",{children:["Precedence (Highest to lowest)",(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"command line"}),(0,t.jsx)("li",{children:".gitignore in the same directory"}),(0,t.jsx)("li",{children:".gitignore in parent directory"}),(0,t.jsxs)("li",{children:[(0,t.jsx)(i.strong,{children:".git/info/exclude"})," file"]}),(0,t.jsxs)("li",{children:["configuration variable ",(0,t.jsx)(i.strong,{children:"core.excludesFile"})]})]})]}),(0,t.jsxs)("li",{children:["Follow ",(0,t.jsx)(i.strong,{children:"globbing pattern"})]})]})})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"5-globbing-pattern-for-gitignore",children:"5. Globbing pattern for .gitignore"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"**Globbing pattern      **"}),(0,t.jsx)(i.th,{children:(0,t.jsx)(i.strong,{children:"Matches"})})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"*.log"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:".log"}),(0,t.jsx)("li",{children:"important.log"}),(0,t.jsx)("li",{children:"file.log"}),(0,t.jsx)("li",{children:"dir/anotherfile.log"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"*.[ab]"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"file.a"}),(0,t.jsx)("li",{children:"file.b"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"tmp/"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"tmp/files.log"}),(0,t.jsx)("li",{children:"tmp/subdir/files.log"}),(0,t.jsx)("li",{children:"parent/tmp/files.log"}),(0,t.jsx)("li",{children:"grandparent/tmp/files.log"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"file.log"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"file.log"}),(0,t.jsx)("li",{children:"dir/file.log"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dir/**/file"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"dir/file"}),(0,t.jsx)("li",{children:"dir/subdir/file"}),(0,t.jsx)("li",{children:"dir/subdir/subsubdir/file"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"**/file"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"dir/file"}),(0,t.jsx)("li",{children:"anotherdir/file"}),(0,t.jsx)("li",{children:"file"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"file?.log"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"file1.log"}),(0,t.jsx)("li",{children:"file2.log"})]})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"!importang.log"}),(0,t.jsx)(i.td,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"important.log"}),(0,t.jsx)("li",{children:"dir/important.log"}),(0,t.jsx)("li",{children:"(the above files will not be ignored)"})]})})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"6-illustration",children:"6. Illustration"}),"\n",(0,t.jsx)(i.h3,{id:"a-git-as-an-object-store",children:"A. GIT as an object store"}),"\n",(0,t.jsx)(i.h4,{id:"step-1-init-the-repository",children:"Step 1. Init the repository"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"# Highlight next line\nthomasli@Thomas-Lis-MBP illustration1 % git init .\nhint: Using 'master' as the name for the initial branch. This default branch name\nhint: is subject to change. To configure the initial branch name to use in all\nhint: of your new repositories, which will suppress this warning, call:\nhint: \nhint: \tgit config --global init.defaultBranch <name>\nhint: \nhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\nhint: 'development'. The just-created branch can be renamed via this command:\nhint: \nhint: \tgit branch -m <name>\n# Highlight next line\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 objects\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    \u2514\u2500\u2500 tags\n\n9 directories, 17 files\n"})}),"\n",(0,t.jsx)(i.h4,{id:"step-2-create-file-in-working-tree",children:"Step 2. Create file in working tree"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'# Highlight next line\nthomasli@Thomas-Lis-MBP illustration1 % echo "Hello World" > HelloWorld.txt\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 objects\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    \u2514\u2500\u2500 tags\n\n9 directories, 17 files\n'})}),"\n",(0,t.jsx)(i.h4,{id:"step-3-add-file-to-index-tree",children:"Step 3. Add file to index tree"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"# Highlight next line\nthomasli@Thomas-Lis-MBP illustration1 % git add HelloWorld.txt \nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n# Highlight next line\n\u251c\u2500\u2500 index\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 objects\n# Highlight next line\n\u2502\xa0\xa0 \u251c\u2500\u2500 55\n# Highlight next line\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7db03de997c86a4a028e1ebd3a1ceb225be238\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    \u2514\u2500\u2500 tags\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238\n# Highlight next line\nblob\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p 557db03de997c86a4a028e1ebd3a1ceb225be238\n# Highlight next line\nHello World\n"})}),"\n",(0,t.jsx)(i.h4,{id:"step-4-create-another-folder-and-file-with-the-same-content-and-add-to-index-tree",children:"Step 4. Create another folder and file (With the same content) and add to index tree"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'# highlight-start\nthomasli@Thomas-Lis-MBP illustration1 % mkdir folderA\nthomasli@Thomas-Lis-MBP illustration1 % echo "Hello World" > folderA/HelloWorld2.txt\nthomasli@Thomas-Lis-MBP illustration1 % git add folderA/HelloWorld2.txt\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 index\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 objects\n\u2502\xa0\xa0 \u251c\u2500\u2500 55\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7db03de997c86a4a028e1ebd3a1ceb225be238\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    \u2514\u2500\u2500 tags\n'})}),"\n",(0,t.jsx)(i.h4,{id:"step-5-commit-the-changes-to-repository",children:"Step 5. Commit the changes to repository"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'# Highlight next line\nthomasli@Thomas-Lis-MBP illustration1 % git commit -am "Initial commit"\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 COMMIT_EDITMSG\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 index\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n# highlight-start\n\u251c\u2500\u2500 logs\n\u2502\xa0\xa0 \u251c\u2500\u2500 HEAD\n\u2502\xa0\xa0 \u2514\u2500\u2500 refs\n\u2502\xa0\xa0     \u2514\u2500\u2500 heads\n\u2502\xa0\xa0         \u2514\u2500\u2500 master\n# highlight-end\n\u251c\u2500\u2500 objects\n# highlight-start\n\u2502\xa0\xa0 \u251c\u2500\u2500 07\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 ff67e7d021a547594965b1723252997f07d088\n# highlight-end\n\u2502\xa0\xa0 \u251c\u2500\u2500 55\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7db03de997c86a4a028e1ebd3a1ceb225be238\n# highlight-start\n\u2502\xa0\xa0 \u251c\u2500\u2500 62\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 862ef896e99e31a8ea3fdbbe6c63f1deecc7be\n\u2502\xa0\xa0 \u251c\u2500\u2500 e3\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7f3782464ff4e498f4bd98500305503678bcf9\n# highlight-end\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    # Highlight next line\n    \u2502\xa0\xa0 \u2514\u2500\u2500 master\n    \u2514\u2500\u2500 tags\n\n16 directories, 26 files\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t 07ff67e7d021a547594965b1723252997f07d088\n# Highlight next line\ncommit\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p 07ff67e7d021a547594965b1723252997f07d088\n# highlight-start\ntree 62862ef896e99e31a8ea3fdbbe6c63f1deecc7be\nauthor athomasliz <athomasliz@yahoo.com.hk> 1685166947 +0800\ncommitter athomasliz <athomasliz@yahoo.com.hk> 1685166947 +0800\n\nInitial commit\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t 62862ef896e99e31a8ea3fdbbe6c63f1deecc7be\n# Highlight next line\ntree\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p 62862ef896e99e31a8ea3fdbbe6c63f1deecc7be\n# highlight-start\n100644 blob 557db03de997c86a4a028e1ebd3a1ceb225be238\tHelloWorld.txt\n040000 tree e37f3782464ff4e498f4bd98500305503678bcf9\tfolderA\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t e37f3782464ff4e498f4bd98500305503678bcf9\n# Highlight next line\ntree\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p e37f3782464ff4e498f4bd98500305503678bcf9\n# highlight-start\n100644 blob 557db03de997c86a4a028e1ebd3a1ceb225be238\tHelloWorld2.txt\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % cat .git/refs/heads/master\n07ff67e7d021a547594965b1723252997f07d088\nthomasli@Thomas-Lis-MBP illustration1 % cat .git/HEAD\nref: refs/heads/master\n'})}),"\n",(0,t.jsx)(i.h3,{id:"b-untracked-file-vs-tracked-file",children:"B. Untracked file vs Tracked file"}),"\n",(0,t.jsx)(i.h4,{id:"step-1-create-a-new-file-in-working-tree",children:"Step 1. Create a new file in working tree"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'thomasli@Thomas-Lis-MBP illustration1 % echo "Happy World" > HappyWorld.txt\nthomasli@Thomas-Lis-MBP illustration1 % git status\nOn branch master\n# highlight-start\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\tHappyWorld.txt\n# highlight-end\n\nnothing added to commit but untracked files present (use "git add" to track)\nthomasli@Thomas-Lis-MBP illustration1 % git diff\n'})}),"\n",(0,t.jsx)(i.h4,{id:"step-2-modify-an-existing-file-in-working-tree",children:"Step 2. Modify an existing file in working tree"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'thomasli@Thomas-Lis-MBP illustration1 % echo "Hello World 2" > HelloWorld.txt\nthomasli@Thomas-Lis-MBP illustration1 % git status\nOn branch master\n# highlight-start\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git restore <file>..." to discard changes in working directory)\n\tmodified:   HelloWorld.txt\n# highlight-end\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\tHappyWorld.txt\n\nno changes added to commit (use "git add" and/or "git commit -a")\nthomasli@Thomas-Lis-MBP illustration1 % git diff\n# highlight-start\ndiff --git a/HelloWorld.txt b/HelloWorld.txt\nindex 557db03..3ee3849 100644\n--- a/HelloWorld.txt\n+++ b/HelloWorld.txt\n@@ -1 +1 @@\n-Hello World\n+Hello World 2\n# highlight-end\n'})}),"\n",(0,t.jsx)(i.h4,{id:"step-3-add-to-index-tree",children:"Step 3. Add to index tree"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'thomasli@Thomas-Lis-MBP illustration1 % git add .\nthomasli@Thomas-Lis-MBP illustration1 % git status\nOn branch master\n# highlight-start\nChanges to be committed:\n  (use "git restore --staged <file>..." to unstage)\n\tnew file:   HappyWorld.txt\n\tmodified:   HelloWorld.txt\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git diff\nthomasli@Thomas-Lis-MBP illustration1 % git diff --staged\n# highlight-start\ndiff --git a/HappyWorld.txt b/HappyWorld.txt\nnew file mode 100644\nindex 0000000..674b232\n--- /dev/null\n+++ b/HappyWorld.txt\n@@ -0,0 +1 @@\n+Happy World\ndiff --git a/HelloWorld.txt b/HelloWorld.txt\nindex 557db03..3ee3849 100644\n--- a/HelloWorld.txt\n+++ b/HelloWorld.txt\n@@ -1 +1 @@\n-Hello World\n+Hello World 2\n# highlight-end\n'})}),"\n",(0,t.jsx)(i.h4,{id:"step-4-commit-to-repository",children:"Step 4. Commit to repository"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'thomasli@Thomas-Lis-MBP illustration1 % git commit -am "Commit 2" \n[master 90b73b9] Commit 2\n 2 files changed, 2 insertions(+), 1 deletion(-)\n create mode 100644 HappyWorld.txt\nthomasli@Thomas-Lis-MBP illustration1 % git status\n# highlight-start              \nOn branch master\nnothing to commit, working tree clean\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git diff  \nthomasli@Thomas-Lis-MBP illustration1 % git diff --staged\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 COMMIT_EDITMSG\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 index\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 logs\n\u2502\xa0\xa0 \u251c\u2500\u2500 HEAD\n\u2502\xa0\xa0 \u2514\u2500\u2500 refs\n\u2502\xa0\xa0     \u2514\u2500\u2500 heads\n\u2502\xa0\xa0         \u251c\u2500\u2500 branch1\n\u2502\xa0\xa0         \u2514\u2500\u2500 master\n\u251c\u2500\u2500 objects\n\u2502\xa0\xa0 \u251c\u2500\u2500 07\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 ff67e7d021a547594965b1723252997f07d088\n# highlight-start\n\u2502\xa0\xa0 \u251c\u2500\u2500 3e\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 e384936466a484e0089c82ce559a10dc9c46ea\n# highlight-end\n\u2502\xa0\xa0 \u251c\u2500\u2500 55\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7db03de997c86a4a028e1ebd3a1ceb225be238\n\u2502\xa0\xa0 \u251c\u2500\u2500 62\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 862ef896e99e31a8ea3fdbbe6c63f1deecc7be\n# highlight-start\n\u2502\xa0\xa0 \u251c\u2500\u2500 67\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 4b232f5786fef7b39ed8e5173cc646af9c666c\n\u2502\xa0\xa0 \u251c\u2500\u2500 90\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 b73b9c46204615c93a876db85da5d519109b4f\n\u2502\xa0\xa0 \u251c\u2500\u2500 a4\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 654fd64cc8965196e7d1bc901bb88564fbd876\n# highlight-end\n\u2502\xa0\xa0 \u251c\u2500\u2500 e3\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7f3782464ff4e498f4bd98500305503678bcf9\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n    \u2502\xa0\xa0 \u2514\u2500\u2500 master\n    \u2514\u2500\u2500 tags\n\n20 directories, 31 files\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t 674b232f5786fef7b39ed8e5173cc646af9c666c\n# Highlight next line\nblob\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p 674b232f5786fef7b39ed8e5173cc646af9c666c\n# Highlight next line\nHappy World\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t 3ee384936466a484e0089c82ce559a10dc9c46ea\n# Highlight next line\nblob\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p 3ee384936466a484e0089c82ce559a10dc9c46ea\nHello World 2\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t a4654fd64cc8965196e7d1bc901bb88564fbd876\n# Highlight next line\ntree\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p a4654fd64cc8965196e7d1bc901bb88564fbd876\n# highlight-start\n100644 blob 674b232f5786fef7b39ed8e5173cc646af9c666c\tHappyWorld.txt\n100644 blob 3ee384936466a484e0089c82ce559a10dc9c46ea\tHelloWorld.txt\n040000 tree e37f3782464ff4e498f4bd98500305503678bcf9\tfolderA\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -t 90b73b9c46204615c93a876db85da5d519109b4f\n# Highlight next line\ncommit\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p 90b73b9c46204615c93a876db85da5d519109b4f\n# highlight-start\ntree a4654fd64cc8965196e7d1bc901bb88564fbd876\nparent 07ff67e7d021a547594965b1723252997f07d088\nauthor athomasliz <athomasliz@yahoo.com.hk> 1685168740 +0800\ncommitter athomasliz <athomasliz@yahoo.com.hk> 1685168740 +0800\n\nCommit 2\n# highlight-end\n'})}),"\n",(0,t.jsx)(i.h3,{id:"c-branching-and-merging",children:"C. Branching and Merging"}),"\n",(0,t.jsx)(i.h4,{id:"step-1-create-a-branch",children:"Step 1. Create a branch"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"# Highlight next line\nthomasli@Thomas-Lis-MBP illustration1 % git branch branch1\nthomasli@Thomas-Lis-MBP illustration1 % tree .git\n.git\n\u251c\u2500\u2500 COMMIT_EDITMSG\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u251c\u2500\u2500 applypatch-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 fsmonitor-watchman.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 post-update.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-applypatch.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-merge-commit.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-push.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-rebase.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 pre-receive.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 prepare-commit-msg.sample\n\u2502\xa0\xa0 \u251c\u2500\u2500 push-to-checkout.sample\n\u2502\xa0\xa0 \u2514\u2500\u2500 update.sample\n\u251c\u2500\u2500 index\n\u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 exclude\n\u251c\u2500\u2500 logs\n\u2502\xa0\xa0 \u251c\u2500\u2500 HEAD\n\u2502\xa0\xa0 \u2514\u2500\u2500 refs\n\u2502\xa0\xa0     \u2514\u2500\u2500 heads\n\u2502\xa0\xa0         \u251c\u2500\u2500 branch1\n\u2502\xa0\xa0         \u2514\u2500\u2500 master\n\u251c\u2500\u2500 objects\n\u2502\xa0\xa0 \u251c\u2500\u2500 07\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 ff67e7d021a547594965b1723252997f07d088\n\u2502\xa0\xa0 \u251c\u2500\u2500 3e\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 e384936466a484e0089c82ce559a10dc9c46ea\n\u2502\xa0\xa0 \u251c\u2500\u2500 55\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7db03de997c86a4a028e1ebd3a1ceb225be238\n\u2502\xa0\xa0 \u251c\u2500\u2500 62\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 862ef896e99e31a8ea3fdbbe6c63f1deecc7be\n\u2502\xa0\xa0 \u251c\u2500\u2500 67\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 4b232f5786fef7b39ed8e5173cc646af9c666c\n\u2502\xa0\xa0 \u251c\u2500\u2500 90\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 b73b9c46204615c93a876db85da5d519109b4f\n\u2502\xa0\xa0 \u251c\u2500\u2500 a4\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 654fd64cc8965196e7d1bc901bb88564fbd876\n\u2502\xa0\xa0 \u251c\u2500\u2500 e3\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 7f3782464ff4e498f4bd98500305503678bcf9\n\u2502\xa0\xa0 \u251c\u2500\u2500 info\n\u2502\xa0\xa0 \u2514\u2500\u2500 pack\n\u2514\u2500\u2500 refs\n    \u251c\u2500\u2500 heads\n        # Highlight next line\n    \u2502\xa0\xa0 \u251c\u2500\u2500 branch1\n    \u2502\xa0\xa0 \u2514\u2500\u2500 master\n    \u2514\u2500\u2500 tags\n\n20 directories, 32 files\n# Highlight next line\nthomasli@Thomas-Lis-MBP illustration1 % cat .git/refs/heads/branch1 \n90b73b9c46204615c93a876db85da5d519109b4f\nthomasli@Thomas-Lis-MBP illustration1 % cat .git/refs/heads/master \n90b73b9c46204615c93a876db85da5d519109b4f\nthomasli@Thomas-Lis-MBP illustration1 % git log --oneline --decorate --graph\n# highlight-start\n* 90b73b9 (HEAD -> master, branch1) Commit 2\n* 07ff67e Initial commit\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git show-branch --more=50\n# highlight-start\n! [branch1] Commit 2\n * [master] Commit 2\n--\n+* [branch1] Commit 2\n+* [branch1^] Initial commit\n# highlight-end\n"})}),"\n",(0,t.jsx)(i.h4,{id:"step-2-add-and-commit-file-to-master",children:"Step 2. Add and commit file to master"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'thomasli@Thomas-Lis-MBP illustration1 % echo "Master" > master.txt\nthomasli@Thomas-Lis-MBP illustration1 % git add .\nthomasli@Thomas-Lis-MBP illustration1 % git commit -am "Commit master"\n[master 226ce7b] Commit master\n 1 file changed, 1 insertion(+)\n create mode 100644 master.txt\nthomasli@Thomas-Lis-MBP illustration1 % git log --oneline --decorate --graph\n# highlight-start\n* 226ce7b (HEAD -> master) Commit master\n* 90b73b9 (branch1) Commit 2\n* 07ff67e Initial commit\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git show-branch --more=10         \n# highlight-start  \n! [branch1] Commit 2\n * [master] Commit master\n--\n * [master] Commit master\n+* [branch1] Commit 2\n+* [branch1^] Initial commit\n# highlight-end\n'})}),"\n",(0,t.jsx)(i.h4,{id:"step-3-add-and-commit-file-to-branch1",children:"Step 3. Add and commit file to branch1"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'thomasli@Thomas-Lis-MBP illustration1 % echo "Branch 1" > branch1.txt \nthomasli@Thomas-Lis-MBP illustration1 % git add .\nthomasli@Thomas-Lis-MBP illustration1 % git commit -am "Commit branch 1"\n[branch1 2c40a53] Commit branch 1\n 1 file changed, 1 insertion(+)\n create mode 100644 branch1.txt\nthomasli@Thomas-Lis-MBP illustration1 % git log --oneline --decorate --graph\n# highlight-start\n* 2c40a53 (HEAD -> branch1) Commit branch 1\n* 90b73b9 Commit 2\n* 07ff67e Initial commit\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git show-branch --more=10           \n# highlight-start\n* [branch1] Commit branch 1\n ! [master] Commit master\n--\n*  [branch1] Commit branch 1\n + [master] Commit master\n*+ [branch1^] Commit 2\n*+ [branch1~2] Initial commit\n# highlight-end\n'})}),"\n",(0,t.jsx)(i.h4,{id:"step-4-merge-branch1-to-master",children:"Step 4. Merge branch1 to master"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"thomasli@Thomas-Lis-MBP illustration1 % git checkout master\nSwitched to branch 'master'\n# Highlight next line\nthomasli@Thomas-Lis-MBP illustration1 % git merge branch1\nhint: Waiting for your editor to close the file... \nMerge branch 'branch1'\n# Please enter a commit message to explain why this merge is necessary,\n# especially if it merges an updated upstream into a topic branch.\n#\n# Lines starting with '#' will be ignored, and an empty message aborts\n# the commit.\n~\n~\n~\nMerge made by the 'ort' strategy.\n branch1.txt | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 branch1.txt\nthomasli@Thomas-Lis-MBP illustration1 % git log --oneline --decorate --graph\n# highlight-start\n*   db15771 (HEAD -> master) Merge branch 'branch1'\n|\\  \n| * 2c40a53 (branch1) Commit branch 1\n* | 226ce7b Commit master\n|/  \n* 90b73b9 Commit 2\n* 07ff67e Initial commit\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git show-branch --more=10\n# highlight-start    \n! [branch1] Commit branch 1\n * [master] Merge branch 'branch1'\n--\n - [master] Merge branch 'branch1'\n+* [branch1] Commit branch 1\n * [master^] Commit master\n+* [master~2] Commit 2\n+* [master~3] Initial commit\n# highlight-end\nthomasli@Thomas-Lis-MBP illustration1 % git cat-file -p db15771          \ntree 944a9ec0188c09280146a157b8710c5b04eadc57\n# highlight-start \nparent 226ce7b8dc033a1f709873af758604edf9c5b64e\nparent 2c40a531b384033ed3da55c32ffa96709c4d6fab\n# highlight-end\nauthor athomasliz <athomasliz@yahoo.com.hk> 1685197296 +0800\ncommitter athomasliz <athomasliz@yahoo.com.hk> 1685197296 +0800\n\nMerge branch 'branch1'\n\n"})}),"\n",(0,t.jsx)(i.h2,{id:"7-reference",children:"7. Reference"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://stackoverflow.com/questions/7861184/what-is-the-difference-between-git-init-and-git-init-bare",children:'What is the difference between "git init" and "git init --bare"?'})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://stackoverflow.com/questions/58003030/what-is-the-git-restore-command-and-what-is-the-difference-between-git-restor",children:'What is the difference between "git restore" and "git reset"?'})}),"\n"]})]})}function g(e={}){const{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}},2969:(e,i,n)=>{n.d(i,{Z:()=>s});n(7294);var t=n(5893);function s(e){let{children:i,bgColor:n="#000000",fontColor:s="#ffffff",fontWeight:r=700,padding:l="0.1rem",margin:d="0rem",border:h="0",borderRadius:a="2px",display:c="inline"}=e;return(0,t.jsx)("span",{style:{backgroundColor:n,color:s,padding:l,paddingLeft:"0.25rem",paddingRight:"0.25rem",margin:d,marginLeft:"0.05rem",marginRight:"0.05rem",display:c,fontWeight:r,border:h,borderRadius:a},children:i})}},1333:(e,i,n)=>{n.d(i,{Z:()=>r});n(7294);var t=n(2969),s=n(5893);function r(e){let{children:i}=e;return(0,s.jsx)(t.Z,{bgColor:"#3333dd",fontWeight:"700",children:i})}},6387:(e,i,n)=>{n.d(i,{Z:()=>r});n(7294);var t=n(2969),s=n(5893);function r(e){let{children:i}=e;return(0,s.jsx)(t.Z,{bgColor:"#dd0000",fontWeight:"700",children:i})}},1151:(e,i,n)=>{n.d(i,{Z:()=>d,a:()=>l});var t=n(7294);const s={},r=t.createContext(s);function l(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);