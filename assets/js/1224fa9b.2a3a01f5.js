"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[2836],{5435:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>l});var n=a(5893),s=a(1151);const t={sidebar_position:2},i="Spring Kafka",o={id:"kafka/spring-kafka",title:"Spring Kafka",description:"Step by Step Guide",source:"@site/docs/kafka/spring-kafka.md",sourceDirName:"kafka",slug:"/kafka/spring-kafka",permalink:"/Notesaurus/docs/kafka/spring-kafka",draft:!1,unlisted:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/kafka/spring-kafka.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/Notesaurus/docs/kafka/overview"},next:{title:"Cryptography",permalink:"/Notesaurus/docs/security/cryptography"}},d={},l=[{value:"Step by Step Guide",id:"step-by-step-guide",level:2},{value:"1. Add library",id:"1-add-library",level:3},{value:"2. Add configuration",id:"2-add-configuration",level:3},{value:"3. Create Kafka Producer Class",id:"3-create-kafka-producer-class",level:3},{value:"4. Create Kafka Consumer Class",id:"4-create-kafka-consumer-class",level:3},{value:"5. Add new method in Rest Controller",id:"5-add-new-method-in-rest-controller",level:3},{value:"6. Test in swagger. Observe the log.",id:"6-test-in-swagger-observe-the-log",level:3}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"spring-kafka",children:"Spring Kafka"}),"\n",(0,n.jsx)(r.h2,{id:"step-by-step-guide",children:"Step by Step Guide"}),"\n",(0,n.jsx)(r.h3,{id:"1-add-library",children:"1. Add library"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",metastring:'title="pom.xml"',children:"<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n"})}),"\n",(0,n.jsx)(r.h3,{id:"2-add-configuration",children:"2. Add configuration"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-yaml",metastring:'title="application.yml"',children:'spring:\n  kafka:\n    bootstrap-servers:\n    - kafka:9092\n    template:\n      default-topic: topic.test\n    consumer:\n      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer\n      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer\n      properties:\n        spring.json.trusted.packages: "*"\n    producer:\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\n      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer\n'})}),"\n",(0,n.jsx)(r.h3,{id:"3-create-kafka-producer-class",children:"3. Create Kafka Producer Class"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",metastring:'title="org.irushu.demo.service.messaging.kafka.DemoProducerService" showLineNumbers',children:'@Component\npublic class DemoProducerService {\n\n    private final KafkaTemplate<String, DemoRequest> kafkaTemplate;\n\n    public DemoProducerService(KafkaTemplate<String, DemoRequest> kafkaTemplate) {\n        this.kafkaTemplate = kafkaTemplate;\n    }\n\n    public void send(DemoRequest demoRequest){\n        {/* highlight-start */}\n        kafkaTemplate.send("topic.test", demoRequest);\n        {/* highlight-end */}\n    }\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"4-create-kafka-consumer-class",children:"4. Create Kafka Consumer Class"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",metastring:'title="org.irushu.demo.service.messaging.kafka.DemoConsumerService" showLineNumbe',children:'@Component\npublic class DemoConsumerService {\n    private static Logger logger = LoggerFactory.getLogger(DemoConsumerService.class);\n    \n    {/* highlight-start */}\n    @KafkaListener(topics = "topic.test", groupId="group1")\n    {/* highlight-end */}\n    public void consume(DemoRequest demoRequest, Message<DemoRequest> message)\n    {\n        logger.info(String.format("DemoRequest created -> %s", demoRequest));\n        MessageHeaders headers = message.getHeaders();\n        logger.info(String.format("Partition Id:%s | Received Timestamp: %s", headers.get(KafkaHeaders.RECEIVED_PARTITION_ID),headers.get(KafkaHeaders.RECEIVED_TIMESTAMP)));\n    }\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"5-add-new-method-in-rest-controller",children:"5. Add new method in Rest Controller"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Autowire the service in your rest controller."}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",metastring:'title="org.irushu.demo.web.controller.DemoController"',children:"@Autowired\nprivate DemoProducerService demoProducerService;\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Add the new method ",(0,n.jsx)(r.strong,{children:"kafkaProducer"})," in your rest controller."]}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",metastring:'title="org.irushu.demo.web.controller.DemoController" showLineNumbers',children:'@RequestMapping(value = "/kafkaProducer", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n@Operation(summary = "Input message.", description = "")\npublic DemoResponse kafkaProducer(@RequestBody DemoRequest demoRequest)\n{\n    {/* highlight-start */}\n    demoProducerService.send(demoRequest);\n    {/* highlight-end */}\n    DemoResponse demoResponse = new DemoResponse();\n    demoResponse.setOutput("Message successfully sent to Kafka Topic");\n    return demoResponse;\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"6-test-in-swagger-observe-the-log",children:"6. Test in swagger. Observe the log."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",metastring:'title="log"',children:"spring-boot-demo-api-demo-1    | INFO  2023-03-27 09:22:54,340 [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.i.d.service.messaging.kafka.DemoConsumerService > DemoRequest created -> DemoRequest{input='Hello World.'}\nspring-boot-demo-api-demo-1    | INFO  2023-03-27 09:22:54,341 [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] o.i.d.service.messaging.kafka.DemoConsumerService > Partition Id:0 | Received Timestamp: 1679908974138\n"})})]})}function u(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,r,a)=>{a.d(r,{Z:()=>o,a:()=>i});var n=a(7294);const s={},t=n.createContext(s);function i(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);