"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[7042],{2278:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>m,toc:()=>d});var n=e(7462),r=(e(7294),e(3905));e(1839);const l={sidebar_position:99},i="GIT",m={unversionedId:"git",id:"git",title:"GIT",description:"| Term | Description |",source:"@site/docs/git.md",sourceDirName:".",slug:"/git",permalink:"/Notesaurus/docs/git",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/git.md",tags:[],version:"current",sidebarPosition:99,frontMatter:{sidebar_position:99},sidebar:"tutorialSidebar",previous:{title:"Day 0: Gang of Four",permalink:"/Notesaurus/docs/design-pattern-principle/gof"}},o={},d=[],p={toc:d};function g(t){let{components:a,...e}=t;return(0,r.kt)("wrapper",(0,n.Z)({},p,e,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"git"},"GIT"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"}," Term ")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"}," Description ")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4 object types"),(0,r.kt)("td",{parentName:"tr",align:null},"commit / tree / blob / annotated tag")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SHA-1"),(0,r.kt)("td",{parentName:"tr",align:null},"An alphanumeric sequence of 40 characters representing a hexadecimal number.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Blobs"),(0,r.kt)("td",{parentName:"tr",align:null},"Binary files",(0,r.kt)("br",null),"Everything is compressed and transformed into a blob before archiving it into a Git repository.",(0,r.kt)("br",null),"An object, whatever it is, will always have the same hash in any repository, in any computer, on the face of the Earth.",(0,r.kt)("br",null),"If you have two different files with the same content, even if they have different names and paths, in Git you will end up having only one blob.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".git folder"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"commit"),(0,r.kt)("td",{parentName:"tr",align:null},"Every commit has a parent, and following these relations between commits, we can always navigate from a random one down to the first one, the already mentioned root commit.",(0,r.kt)("br",null),"First commit did not have a parent. Git, while navigating and reconstructing our repository, simply knows it is done when it finds a commit without a parent.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Doesn't do deltas"),(0,r.kt)("td",{parentName:"tr",align:null},"Git doesn't do deltas (at least not in this case), and every commit is actually a snapshot of the entire repository.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Unreachable commits"),(0,r.kt)("td",{parentName:"tr",align:null},"It simply won't delete unreachable commits, at least not immediately. It makes some housekeeping automatically at a given time, as it has some powerful garbage collection features")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Working Tree --\x3e Staging Area --\x3e HEAD"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"}," Command ")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"}," Description ")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git config --global user.name xxxx"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git config --global user.email xxxx"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git init"),(0,r.kt)("td",{parentName:"tr",align:null},"Init a Repo")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git init --bare"),(0,r.kt)("td",{parentName:"tr",align:null},"Init a remote repository")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git add ."),(0,r.kt)("td",{parentName:"tr",align:null},"Add the resource (ready for commit)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git status"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git cat-file -p {SHA-1}"),(0,r.kt)("td",{parentName:"tr",align:null},"Unzip and cat the file",(0,r.kt)("br",null),"-p means pretty-print")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},'git commit -am "Add an orange"'),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git log --format=raw"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git log --format=fuller"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git log --oneline"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git log --oneline --graph --decorate"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},'echo "banana"'),(0,r.kt)("td",{parentName:"tr",align:null},"git hash-object --stdin")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cat .git/refs/heads/master"),(0,r.kt)("td",{parentName:"tr",align:null},"Location of Reference file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git branch {branchName}Create Branch {branchName}"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git branch -d {branchName}"),(0,r.kt)("td",{parentName:"tr",align:null},"Delete Branch {branchName}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git branch -D {branchName}"),(0,r.kt)("td",{parentName:"tr",align:null},"Force Delete Branch {branchName}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git checkout {branchName}"),(0,r.kt)("td",{parentName:"tr",align:null},"Move to Branch {branchName}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git checkout HEAD^"),(0,r.kt)("td",{parentName:"tr",align:null},"Move to Detached HEAD state. ",(0,r.kt)("br",null),"Being in this state basically means that",(0,r.kt)("br",null)," HEAD does not reference a branch")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git reset --hard {SHA-1}"),(0,r.kt)("td",{parentName:"tr",align:null},"Moves current branch to this {SHA-1}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git reset --hard master"),(0,r.kt)("td",{parentName:"tr",align:null},"Moves current branch to master ",(0,r.kt)("a",{href:"https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified"},"Read"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git reflog show"),(0,r.kt)("td",{parentName:"tr",align:null},"Records what happens in the repository",(0,r.kt)("br",null)," while you commit, reset, check out")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git show {commit_id} --name-only"),(0,r.kt)("td",{parentName:"tr",align:null},"Show the content for a commit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git reflog {branchName}"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git tag -a annotatedTag {SHA-1}"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git diff"),(0,r.kt)("td",{parentName:"tr",align:null},"Working Tree VS Staging Area")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git diff --cached"),(0,r.kt)("td",{parentName:"tr",align:null},"Staging Area VS HEAD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git rebase {branch A}"),(0,r.kt)("td",{parentName:"tr",align:null},"Rebase the current branch on top of branch A")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git rebase -i HEAD~{N}"),(0,r.kt)("td",{parentName:"tr",align:null},"Merge several commit into 1",(0,r.kt)("br",null),"i means interactive, while the HEAD~N argument means",(0,r.kt)("br",null)," I want to rebase the last N commits")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git merge {branchName}"),(0,r.kt)("td",{parentName:"tr",align:null},"merge the branch into the master one")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git cherry-pick\xa0{SHA-1}"),(0,r.kt)("td",{parentName:"tr",align:null},"cherry-pick a particular commit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git remote -v"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git push"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git push --force-with-lease"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git pull"),(0,r.kt)("td",{parentName:"tr",align:null},"Download and merge")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"git fetch"),(0,r.kt)("td",{parentName:"tr",align:null},"Just download")))))}g.isMDXComponent=!0}}]);