"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[2276],{4764:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var s=i(5893),r=i(1151);const l={sidebar_position:2},t="JVM",o={id:"java/jvm",title:"JVM",description:"Notes",source:"@site/docs/java/jvm.md",sourceDirName:"java",slug:"/java/jvm",permalink:"/Notesaurus/docs/java/jvm",draft:!1,unlisted:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/java/jvm.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Core Java",permalink:"/Notesaurus/docs/java/core"},next:{title:"Misc",permalink:"/Notesaurus/docs/java/misc"}},a={},c=[{value:"Notes",id:"notes",level:3},{value:"Reference",id:"reference",level:3},{value:"Books",id:"books",level:3}];function h(e){const n={a:"a",em:"em",h1:"h1",h3:"h3",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"jvm",children:"JVM"}),"\n",(0,s.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["From source code to JVM","\n",(0,s.jsx)(n.mermaid,{value:"   flowchart LR;\n   A1[Java source code <br/>.java files]--\x3eB1[Java Compiler]--\x3eC[bytecode <br/>.class files]--\x3eD1[JVM for Windows]--\x3eE1[fa:fa-windows Windows]\n   A2[Kotlin source code <br/>.kt files]--\x3eB2[Kotlin Compiler]--\x3eC\n   A3[Scala source code <br/>.sc files]--\x3eB3[Scala Compiler]--\x3eC\n   C--\x3eD2[JVM for Linux]--\x3eE2[fa:fa-linux Linix]\n   C--\x3eD3[JVM for macOS]--\x3eE3[fa:fa-apple macOS]       "}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["JVM Overview\n",(0,s.jsx)(n.a,{target:"_blank",href:i(5732).Z+"",children:(0,s.jsx)(n.img,{alt:"JVM Overview",src:i(4457).Z+"",width:"1123",height:"794"})})]}),"\n",(0,s.jsxs)(n.li,{children:["Runtime data areas","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["PC registers (Call stack)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"What code and which line of code being executed is being held here"}),"\n",(0,s.jsx)(n.li,{children:"Hold the address of the instruction"}),"\n",(0,s.jsx)(n.li,{children:"Know the sequence of instructions that needs to be executed"}),"\n",(0,s.jsx)(n.li,{children:"Each thread has its own PC register"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Stack area","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Linear data structure"}),"\n",(0,s.jsxs)(n.li,{children:["Where the ",(0,s.jsx)(n.strong,{children:"primitives"})," and ",(0,s.jsx)(n.strong,{children:"references to the heap"})," are stored"]}),"\n",(0,s.jsx)(n.li,{children:"Each thread has its own stack"}),"\n",(0,s.jsxs)(n.li,{children:["Each stack has ",(0,s.jsx)(n.strong,{children:"frames"})]}),"\n",(0,s.jsx)(n.li,{children:"Each frame is created for each method call"}),"\n",(0,s.jsxs)(n.li,{children:["When method A calls method B, a new frame for method B is created. This new frame will then become the ",(0,s.jsx)(n.strong,{children:"current frame"}),", and also the ",(0,s.jsx)(n.strong,{children:"top frame"})," of the stack. The stack has access to this top frame only."]}),"\n",(0,s.jsx)(n.li,{children:"Each frame is removed after method execution."}),"\n",(0,s.jsxs)(n.li,{children:["Each frame consists of the following:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Local variable array","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For instance method, the first element is the reference to the object itself, i.e. this."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Frame data","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"consists of data needed to execute the method. Examples: reference to the constant pool."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Operand stack"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"StackOverFlowError"})," is thrown if stack memory is too small for the frame"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"OutOfMemoryError"})," is thrown if not enough space for a new stack for a new thread"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Heap area","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hierarchical data structure"}),"\n",(0,s.jsxs)(n.li,{children:["Where the ",(0,s.jsx)(n.strong,{children:"object"})," is stored"]}),"\n",(0,s.jsx)(n.li,{children:"Dynamic memory allocation"}),"\n",(0,s.jsx)(n.li,{children:"Garbage collection by JVM here"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"OutOfMemoryError"})," is thrown when running out of heap memory"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Method area (Metaspace)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Class's metadata","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Klass"}),"\n",(0,s.jsx)(n.li,{children:"Bytecode"}),"\n",(0,s.jsx)(n.li,{children:"Static variables"}),"\n",(0,s.jsx)(n.li,{children:"Constant pools"}),"\n",(0,s.jsx)(n.li,{children:"Constructor code"}),"\n",(0,s.jsx)(n.li,{children:"Annotation"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Native method stack area","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"a.k.a. C stack"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Stack or Heap: where are things actually stored?","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Primitives and wrapper classes","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Both are immutable"}),"\n",(0,s.jsx)(n.li,{children:"Primitive for the stack frame is stored on the stack"}),"\n",(0,s.jsx)(n.li,{children:"Primitive belongs to the object (as instance variable) is stored together with the object on the heap"}),"\n",(0,s.jsx)(n.li,{children:"All wrapper class objects are stored on the heap"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["References","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Can be stored on both the stack and the heap"}),"\n",(0,s.jsx)(n.li,{children:"Local variable: stack"}),"\n",(0,s.jsx)(n.li,{children:"Instance variable: heap"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Objects","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Always on the heap"}),"\n",(0,s.jsx)(n.li,{children:"String is stored in String Pool (a.k.a. String Constant Pool) in the heap"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Call-by-value vs Call-by-reference","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Call-by-value: passing parameters as ",(0,s.jsx)(n.strong,{children:"copy"}),". Hence immutable."]}),"\n",(0,s.jsxs)(n.li,{children:["Call-by-reference: passing parameters as ",(0,s.jsx)(n.strong,{children:"reference"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The object being referred to is mutable. Anyone who get its reference can mutate the object, even it is declared private."}),"\n",(0,s.jsx)(n.li,{children:"Problem: Violate the proper encapsulation"}),"\n",(0,s.jsx)(n.li,{children:"Solution: Defensive copying, Deep copy on both the way in and out"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Garbage Collection","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Eligibility of object for GC: whether the object can be deallocated from memory"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GC root"})," (Garbage collection root): special type of live object not eligible for GC"]}),"\n",(0,s.jsx)(n.li,{children:"All objects reachable from GC roots are not eligible for GC"}),"\n",(0,s.jsxs)(n.li,{children:["GC root includes:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Local variable"}),"\n",(0,s.jsx)(n.li,{children:"Static variable"}),"\n",(0,s.jsx)(n.li,{children:"Active Java threads"}),"\n",(0,s.jsx)(n.li,{children:"Native references"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Generational GC: divide memory into young and old generation"}),"\n",(0,s.jsxs)(n.li,{children:["Minor GC","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Triggered when eden is full"}),"\n",(0,s.jsx)(n.li,{children:"GC on young generation"}),"\n",(0,s.jsx)(n.li,{children:"Move live objects from young generation to old generation"}),"\n",(0,s.jsxs)(n.li,{children:["Algorithm: ",(0,s.jsx)(n.strong,{children:"Mark and Copy"}),". For newbie, google details for minor GC.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Survivor space is deliberately divided into S0 and S1. This is for the purpose of copying"}),"\n",(0,s.jsx)(n.li,{children:"S0 and S1 takes turn as the target copying space"}),"\n",(0,s.jsxs)(n.li,{children:["Take S1 to be the target copying space. For live objects in different places, do the following:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["At S1","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For live objects that reach their live threshold, copy to old generation"}),"\n",(0,s.jsx)(n.li,{children:"clear only the live objects above in S1"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["At eden","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"copy to S1"}),"\n",(0,s.jsx)(n.li,{children:"clear the whole eden"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["At S0","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"copy to S1"}),"\n",(0,s.jsx)(n.li,{children:"clear the whole S0"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Incoming new objects","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"copy to eden"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Major GC","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Triggered when tenured is full"}),"\n",(0,s.jsx)(n.li,{children:"GC on old generation"}),"\n",(0,s.jsxs)(n.li,{children:["Algorithm: ",(0,s.jsx)(n.strong,{children:"Mark Sweep Compact"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"reference",children:"Reference"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/77046489/java-how-to-avoid-stop-the-world-garbage-collection",children:"java how to avoid stop-the-world garbage collection"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/40182392/does-java-garbage-collect-always-has-to-stop-the-world",children:'Does Java Garbage Collect always has to "Stop-the-World"?'})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.zhihu.com/question/29114369?utm_id=0",children:"minor gc \u4f1a\u53d1\u751fstop the world \u73b0\u8c61\u5417\uff1f"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://blog.csdn.net/qq_34988304/article/details/105381353",children:"GC \u7b97\u6cd5(\u57fa\u7840\u7bc7)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://iq.opengenus.org/memory-management-in-java-mark-sweep-compact-copy/",children:"Mark Sweep Compact Copy algorithm"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"books",children:"Books"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://learning.oreilly.com/library/view/java-memory-management/9781801812856/",children:(0,s.jsx)(n.img,{src:"https://learning.oreilly.com/covers/urn:orm:book:9781801812856/160h/",alt:"Java Memory Management"})})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},5732:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/files/jvm-memory-305ef10272dcfe4fcee1f67ecb7dd682.svg"},4457:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/images/jvm-memory-305ef10272dcfe4fcee1f67ecb7dd682.svg"},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>t});var s=i(7294);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);