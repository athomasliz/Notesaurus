"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[4602],{145:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>l});var r=o(7462),a=(o(7294),o(3905));o(1839);const t={sidebar_position:1},i="Docker 101",s={unversionedId:"docker/docker",id:"docker/docker",title:"Docker 101",description:"Command: Docker",source:"@site/docs/docker/docker.md",sourceDirName:"docker",slug:"/docker/",permalink:"/Notesaurus/docs/docker/",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/docker/docker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"SOLID",permalink:"/Notesaurus/docs/design-pattern-principle/solid"},next:{title:"GIT",permalink:"/Notesaurus/docs/git"}},c={},l=[{value:"Command: Docker",id:"command-docker",level:3},{value:"Dockerfile",id:"dockerfile",level:3},{value:"Command: docker-compose",id:"command-docker-compose",level:3},{value:"docker-compose.yml",id:"docker-composeyml",level:3}],d={toc:l};function m(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"docker-101"},"Docker 101"),(0,a.kt)("h3",{id:"command-docker"},"Command: Docker"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'docker info\ndocker version\n\ndocker image ls\ndocker image ls --digests\ndocker image ls --filter dangling=true\ndocker image ls --filter=reference="*:latest"\ndocker image ls --format "{{.Size}}"\ndocker image ls --format "{{.Repository}}: {{.Tag}}: {{.Size}}"\ndocker image pull <repository>:<tag>\ndocker image inspect mysql:8.0.32\ndocker image rm mysql:8.0.32\ndocker rmi mysql:8.0.32 // alias of image rm\n\ndocker history mysql:8.0.32\ndocker manifest inspect mysql:8.0.32\ndocker search openjdk\ndocker search openjdk --filter "is-official=true"\ndocker search openjdk --filter "is-automated=true"\n\ndocker buildx build --platform linux/arm/v7 -t myimage:arm-v7 .\n\ndocker container ls\ndocker container run -it <image_name> <app>\ndocker container run -dit --mount source=source_vol,target=/vol <image_name> // -d run in background\ndocker container exec -it <container_id> bash\ndocker container start <container_id>\ndocker container stop <container_id>\ndocker container rm <container_id>\n\ndocker volume ls\ndocker volume create <vol_name>\ndocker volume inspect <vol_name>\ndocker volume rm <vol_name>\ndocker volume prune // Will remove all volumes, use with care\n\ndocker network ls\n\ndocker plugin ls\ndocker plugin install <image_name> --alias <alias_name> --grant-all-permissions\n')),(0,a.kt)("h3",{id:"dockerfile"},"Dockerfile"),(0,a.kt)("p",null,"FROM, RUN, COPY, VOLUME, WORKDIR, EXPOSE, ENTRYPOINT"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Dockerfile for Spring Boot application"',title:'"Dockerfile',for:!0,Spring:!0,Boot:!0,'application"':!0},'FROM openjdk:20-jdk-slim\nVOLUME /tmp\nWORKDIR /app\nCOPY ./target/*.jar /app/spring-boot-demo.jar\nENTRYPOINT ["java","-jar","spring-boot-demo.jar"]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Dockerfile for React application"',title:'"Dockerfile',for:!0,React:!0,'application"':!0},'FROM node:alpine\nWORKDIR /app\nCOPY package.json ./\nCOPY package-lock.json ./\nCOPY ./ ./\nRUN npm i\nCMD ["npm", "run", "start"]\n')),(0,a.kt)("p",null,"Also consider multi build stage, and use --from="),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"COPY --from=<build stage> <build path of build stage> <image path>\n")),(0,a.kt)("h3",{id:"command-docker-compose"},"Command: docker-compose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose --version\ndocker-compose up\ndocker-compose up -d // run in background\ndocker-compose -f <yml_file> up\ndocker-compose down // stop and delete\ndocker-compose start\ndocker-compose stop\ndocker-compose rm // delete\ndocker-compose restart\ndocker-compose ps\ndocker-compose top\n")),(0,a.kt)("h3",{id:"docker-composeyml"},"docker-compose.yml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="docker-compose.yml"',title:'"docker-compose.yml"'},'version: \'3.8\'\nservices:\n  redis:\n    hostname: redis\n    image: redis:latest\n    ports:\n      - 6379:6379\n  zookeeper:\n    image: confluentinc/cp-zookeeper:latest\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n    ports:\n      - 22181:2181\n  kafka:\n    image: confluentinc/cp-kafka:latest\n    depends_on:\n      - zookeeper\n    ports:\n      - 29092:9092\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n  init-kafka:\n    image: confluentinc/cp-kafka:latest\n    depends_on:\n      - kafka\n    entrypoint: [ \'/bin/sh\', \'-c\' ]\n    command: |\n      "\n      # blocks until kafka is reachable\n      kafka-topics --bootstrap-server kafka:9092 --list\n      \n      echo -e \'Creating kafka topics\'\n      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic topic.test --replication-factor 1 --partitions 1\n      \n      echo -e \'Successfully created the following topics:\'\n      kafka-topics --bootstrap-server kafka:9092 --list\n      "\n  mysqldb:\n    image: mysql:8.0.32\n    cap_add:\n      - SYS_NICE\n    restart: always\n    environment:\n      - MYSQL_DATABASE=$MYSQLDB_DATABASE\n      - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD\n    ports:\n      - $MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT\n    volumes:\n      - db:/var/lib/mysql\n      - ./mysql/db/init.sql:/docker-entrypoint-initdb.d/init.sql\n  service-demo:\n    image: irushu/service-demo\n    build:\n      context: ./\n      dockerfile: Dockerfile\n    depends_on:\n      - mysqldb\n      - kafka\n      - redis\n    ports:\n      - 20001:8080\n    environment:\n      SPRING_APPLICATION_JSON: \'{\n        "spring.datasource.url"  : "jdbc:mysql://mysqldb:$MYSQLDB_DOCKER_PORT/$MYSQLDB_DATABASE?allowPublicKeyRetrieval=true&useSSL=false",\n        "spring.datasource.username" : "$MYSQLDB_USER",\n        "spring.datasource.password" : "$MYSQLDB_ROOT_PASSWORD",\n        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL8Dialect",\n        "spring.jpa.hibernate.ddl-auto" : "update"\n      }\'\n    links:\n      - mysqldb\n    volumes:\n      - ./logs:/app/logs\n  service-login:\n    image: irushu/service-login\n    build:\n      context: ./\n      dockerfile: Dockerfile\n    depends_on:\n      - mysqldb\n    ports:\n      - 20000:8080\n    environment:\n      SPRING_APPLICATION_JSON: \'{\n        "spring.datasource.url"  : "jdbc:mysql://mysqldb:$MYSQLDB_DOCKER_PORT/$MYSQLDB_DATABASE?allowPublicKeyRetrieval=true&useSSL=false",\n        "spring.datasource.username" : "$MYSQLDB_USER",\n        "spring.datasource.password" : "$MYSQLDB_ROOT_PASSWORD",\n        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL8Dialect",\n        "spring.jpa.hibernate.ddl-auto" : "update"\n      }\'\n    links:\n      - mysqldb\n    volumes:\n      - ./logs:/app/logs\n  web-demo:\n    image: irushu/web-demo\n    build:\n      context: ./\n      dockerfile: Dockerfile\n    ports:\n      - 3001:3000\nvolumes:\n  db:\n    driver: local\n')))}m.isMDXComponent=!0}}]);