"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[3407],{969:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>n,metadata:()=>p,toc:()=>d});var o=r(7462),a=(r(7294),r(3905));r(1839);const n={sidebar_position:7},i="Node Forge",p={unversionedId:"react-native/framework-library/node-forge",id:"react-native/framework-library/node-forge",title:"Node Forge",description:"A native implementation of TLS, and various other cryptographic tools in JavaScript.",source:"@site/docs/react-native/framework-library/node-forge.md",sourceDirName:"react-native/framework-library",slug:"/react-native/framework-library/node-forge",permalink:"/Notesaurus/docs/react-native/framework-library/node-forge",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/react-native/framework-library/node-forge.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Axios",permalink:"/Notesaurus/docs/react-native/framework-library/axios"},next:{title:"Expo Local Authentication",permalink:"/Notesaurus/docs/react-native/framework-library/expo-local-authentication"}},s={},d=[{value:"Reference",id:"reference",level:2},{value:"Step by Step Guide",id:"step-by-step-guide",level:2},{value:"1. Import key",id:"1-import-key",level:3},{value:"2. (Android Only) Set noCompress for aaptOptions",id:"2-android-only-set-nocompress-for-aaptoptions",level:3},{value:"3. Load key. Perform encryption or decryption",id:"3-load-key-perform-encryption-or-decryption",level:3}],c={toc:d};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"node-forge"},"Node Forge"),(0,a.kt)("p",null,"A native implementation of TLS, and various other cryptographic tools in JavaScript."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"npm install node-forge\n")),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/node-forge"},"Official Site"))),(0,a.kt)("h2",{id:"step-by-step-guide"},"Step by Step Guide"),(0,a.kt)("h3",{id:"1-import-key"},"1. Import key"),(0,a.kt)("p",null,"(Android) Under android/app/src/main/assets/"),(0,a.kt)("h3",{id:"2-android-only-set-nocompress-for-aaptoptions"},"2. (Android Only) Set noCompress for aaptOptions"),(0,a.kt)("p",null,"Otherwise certificate or key will be compressed and cannot be read by RNFetchBlob fs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="android/app/build.gradle"',title:'"android/app/build.gradle"'},'aaptOptions {\n    noCompress "UAT_api_private_key.pem"\n    noCompress "UAT_api_public_key.crt"\n}\n')),(0,a.kt)("h3",{id:"3-load-key-perform-encryption-or-decryption"},"3. Load key. Perform encryption or decryption"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Encryption"',title:'"Encryption"'},'let path = RNFetchBlob.fs.asset("UAT_api_public_key.crt")\nawait fs.readFile(path,\'utf8\')\n.then((data) => {\n    console.log("[Certificate]: "+data);\n    const certificate = forge.pki.certificateFromPem(data);\n    encryptedLogin = certificate.publicKey.encrypt(forge.util.encodeUtf8(encryptedLogin));\n    encryptedPassword = certificate.publicKey.encrypt(forge.util.encodeUtf8(encryptedPassword));\n    encryptedLogin = forge.util.encode64(encryptedLogin);\n    encryptedPassword = forge.util.encode64(encryptedPassword);\n    console.log("[Encrypted Login] " +encryptedLogin);\n    console.log("[Encrypted Password] " +encryptedPassword);\n})\n.catch(e=>console.error(e))\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Decryption"',title:'"Decryption"'},'let path2 = RNFetchBlob.fs.asset("UAT_api_private_key.pem")\nawait fs.readFile(path2,\'utf8\')\n.then((data) => {\n    console.log("[Private Key]: "+data);\n    const privateKey = forge.pki.privateKeyFromPem(data);\n    let decryptedLogin = privateKey.decrypt(forge.util.decode64(encryptedLogin));\n    let decryptedPassword = privateKey.decrypt(forge.util.decode64(encryptedPassword));  \n    console.log("[Decrypted Login] " +decryptedLogin);\n    console.log("[Decrypted Password] " +decryptedPassword);\n})\n.catch(e=>console.error(e))\n')))}l.isMDXComponent=!0}}]);