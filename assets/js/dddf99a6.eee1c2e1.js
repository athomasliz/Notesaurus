"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[2594],{9052:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));n(1839);const r={sidebar_position:2},s="Suppress SSL",o={unversionedId:"react-native/Miscellaneous/suppress-ssl",id:"react-native/Miscellaneous/suppress-ssl",title:"Suppress SSL",description:"This feature is applied to testing environment which makes use of self signed certificate and lead to security error (Android or iOS will check the validity of SSL certificate). Remember to remove this feature from production version.",source:"@site/docs/react-native/Miscellaneous/suppress-ssl.md",sourceDirName:"react-native/Miscellaneous",slug:"/react-native/Miscellaneous/suppress-ssl",permalink:"/Notesaurus/docs/react-native/Miscellaneous/suppress-ssl",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/react-native/Miscellaneous/suppress-ssl.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Native Bridging",permalink:"/Notesaurus/docs/react-native/Miscellaneous/native-bridging"},next:{title:"iOS Distribution",permalink:"/Notesaurus/docs/react-native/Miscellaneous/ios-distribution"}},l={},c=[{value:"iOS",id:"ios",level:2},{value:"Android",id:"android",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"suppress-ssl"},"Suppress SSL"),(0,a.kt)("p",null,"This feature is applied to testing environment which makes use of self signed certificate and lead to security error (Android or iOS will check the validity of SSL certificate). Remember to remove this feature from production version."),(0,a.kt)("h2",{id:"ios"},"iOS"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the package ",(0,a.kt)("strong",{parentName:"p"},"React-RCTNetwork"),", add the following code:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="RCTHTTPRequestHandler.mm"',title:'"RCTHTTPRequestHandler.mm"'},"(void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler\n{\n    completionHandler(NSURLSessionAuthChallengeUseCredential, [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust]);\n}\n")))),(0,a.kt)("h2",{id:"android"},"Android"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a new custom HTTP Client Factory Class ",(0,a.kt)("strong",{parentName:"p"},"CustomClientFactory.java")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/app/src/main/java/com/xxx/CustomClientFactory.java"',title:'"android/app/src/main/java/com/xxx/CustomClientFactory.java"'},'public class CustomClientFactory implements OkHttpClientFactory {\n    private static final String TAG = "OkHttpClientFactory";\n    @Override\n    public OkHttpClient createNewNetworkModuleClient() {\n        try {\n            // Create a trust manager that does not validate certificate chains\n            final TrustManager[] trustAllCerts = new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {\n                    }\n\n                    @Override\n                    public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {\n                    }\n\n                    @Override\n                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                        return new java.security.cert.X509Certificate[]{};\n                    }\n                }\n            };\n\n            // Install the all-trusting trust manager\n            final SSLContext sslContext = SSLContext.getInstance("SSL");\n            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n\n            // Create an ssl socket factory with our all-trusting manager\n            final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();\n\n            OkHttpClient.Builder builder = new OkHttpClient.Builder()\n                    .connectTimeout(0, TimeUnit.MILLISECONDS).readTimeout(0, TimeUnit.MILLISECONDS)\n                    .writeTimeout(0, TimeUnit.MILLISECONDS).cookieJar(new ReactCookieJarContainer());\n            builder.sslSocketFactory(sslSocketFactory, (X509TrustManager) trustAllCerts[0]);\n            builder.hostnameVerifier(new HostnameVerifier() {\n                @Override\n                public boolean verify(String hostname, SSLSession session) {\n                    return true;\n                }\n            });\n\n            OkHttpClient okHttpClient = builder.build();\n            return okHttpClient;\n        } catch (Exception e) {\n            Log.e(TAG, e.getMessage());\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("strong",{parentName:"p"},"onCreate")," method in ",(0,a.kt)("strong",{parentName:"p"},"MainApplicaton.java"),", add the following line."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/app/src/main/java/com/emoapp/MainApplication.java"',title:'"android/app/src/main/java/com/emoapp/MainApplication.java"'},"public void onCreate() {\n    ...\n    OkHttpClientProvider.setOkHttpClientFactory(new CustomClientFactory());\n    ...\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("strong",{parentName:"p"},"AndroidManifest.xml"),", add the network security configuration ",(0,a.kt)("strong",{parentName:"p"},"network_security_config.xml"),"."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="android/app/src/main/AndroidManifest.xml"',title:'"android/app/src/main/AndroidManifest.xml"'},'<application\n  ...\n  android:networkSecurityConfig="@xml/network_security_config"\n  ...\n>\n</application>\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("strong",{parentName:"p"},"network_security_config.xml"),", add omain config, which include the domain and the self signed SSL certificate."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="android/app/src/main/res/xml/network_security_config.xml"',title:'"android/app/src/main/res/xml/network_security_config.xml"'},'<?xml version="1.0" encoding="utf-8"?>\n<network-security-config>\n    ...\n    <domain-config>\n        <domain includeSubdomains="true">www.xxx.com</domain>\n        <trust-anchors>\n        <certificates src="@raw/direct"/>\n        </trust-anchors>\n    </domain-config>\n</network-security-config>\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add the self-signed certificate(without the file extention) under the ",(0,a.kt)("strong",{parentName:"p"},"android/app/src/main/res/raw")," folder."))))}d.isMDXComponent=!0}}]);