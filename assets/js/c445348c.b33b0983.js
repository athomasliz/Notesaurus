"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[4912],{564:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=t(7462),o=(t(7294),t(3905));t(1839);const i={sidebar_position:8},a="Day 7:  Create a Login API with JPA Authentication",s={unversionedId:"spring-boot/security",id:"spring-boot/security",title:"Day 7:  Create a Login API with JPA Authentication",description:"Step by Step Guide",source:"@site/docs/spring-boot/security.md",sourceDirName:"spring-boot",slug:"/spring-boot/security",permalink:"/Notesaurus/docs/spring-boot/security",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/spring-boot/security.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Day 6:  Secure with TLS",permalink:"/Notesaurus/docs/spring-boot/tls"},next:{title:"Unit Test with Mockito",permalink:"/Notesaurus/docs/spring-boot/mockito"}},u={},c=[{value:"Step by Step Guide",id:"step-by-step-guide",level:2},{value:"1. Add configuration",id:"1-add-configuration",level:3},{value:"2. Create the <strong>table User</strong>. Provide corresponding Model and JPA Repository",id:"2-create-the-table-user-provide-corresponding-model-and-jpa-repository",level:3},{value:"3. Implement the method <strong>loadUserByUsername</strong> of Spring interface <strong>UserDetailsService</strong>",id:"3-implement-the-method-loaduserbyusername-of-spring-interface-userdetailsservice",level:3},{value:"4. Implement the method <strong>authenticate</strong> of Spring interface <strong>AuthenticationManager</strong> and provide implementation of <strong>PasswordEncoder</strong>",id:"4-implement-the-method-authenticate-of-spring-interface-authenticationmanager-and-provide-implementation-of-passwordencoder",level:3},{value:"5. Configure <strong>SecurityFilterChain</strong> for Spring Web MVC",id:"5-configure-securityfilterchain-for-spring-web-mvc",level:3},{value:"6. Create <strong>JWTService</strong> that create JWT token",id:"6-create-jwtservice-that-create-jwt-token",level:3},{value:"7. Create <strong>LoginController</strong> that returns JWT token on successful authentication",id:"7-create-logincontroller-that-returns-jwt-token-on-successful-authentication",level:3}],l={toc:c};function g(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"day-7--create-a-login-api-with-jpa-authentication"},"Day 7:  Create a Login API with JPA Authentication"),(0,o.kt)("h2",{id:"step-by-step-guide"},"Step by Step Guide"),(0,o.kt)("h3",{id:"1-add-configuration"},"1. Add configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.yml"',title:'"pom.yml"'},"<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt-api</artifactId>\n  <version>0.11.5</version>\n</dependency>\n<dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt-impl</artifactId>\n  <version>0.11.5</version>\n</dependency>\n<dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt-jackson</artifactId>\n  <version>0.11.5</version>\n</dependency>\n")),(0,o.kt)("h3",{id:"2-create-the-table-user-provide-corresponding-model-and-jpa-repository"},"2. Create the ",(0,o.kt)("strong",{parentName:"h3"},"table User"),". Provide corresponding Model and JPA Repository"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE `user` (\n  `id` int NOT NULL,\n  `username` varchar(255) NOT NULL,\n  `password` varchar(255) NOT NULL,\n  `role` varchar(255) NOT NULL,\n  PRIMARY KEY (`id`),\n  CONSTRAINT UC_username UNIQUE (`username`)\n);\ninsert into `user` (`id`, `username`, `password`, `role`) values( 1, 'thomasli','$2a$10$P7uGVteoic43vKmSYbRcIOVOSRO2B5UfIoHIMRkXYK8cCkm6dJhGK','ROLE');\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="org.irushu.login.persistence.model.User"',title:'"org.irushu.login.persistence.model.User"'},'@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(name="user")\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(nullable=false)\n    private Integer id;\n\n    @Column(nullable=false, unique=true)\n    private String username;\n\n    @Column(nullable=false)\n    private String password;\n\n    @Column(nullable=false)\n    private String role;\n\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="org.irushu.login.persistence.repository.UserRepository"',title:'"org.irushu.login.persistence.repository.UserRepository"'},'public interface UserRepository extends JpaRepository<User, String> {\n\n    @Query("SELECT a FROM User a WHERE a.username = :username")\n    User findFirstByUsername(@Param("username") String username);\n}\n')),(0,o.kt)("h3",{id:"3-implement-the-method-loaduserbyusername-of-spring-interface-userdetailsservice"},"3. Implement the method ",(0,o.kt)("strong",{parentName:"h3"},"loadUserByUsername")," of Spring interface ",(0,o.kt)("strong",{parentName:"h3"},"UserDetailsService")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="org.irushu.login.service.UserDetailsServiceImpl"',title:'"org.irushu.login.service.UserDetailsServiceImpl"'},'package org.irushu.login.service;\n\nimport org.irushu.login.persistence.model.User;\nimport org.irushu.login.persistence.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.User.UserBuilder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    private UserRepository repository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = repository.findFirstByUsername(username);\n        UserBuilder builder = null;\n        if (user != null) {\n            builder = org.springframework.security.core.userdetails.User.withUsername(username);\n            builder.password(user.getPassword());\n            builder.roles(user.getRole());\n        } else {\n            throw new UsernameNotFoundException("User not found.");\n        }\n        return builder.build();\n    }\n\n}\n')),(0,o.kt)("h3",{id:"4-implement-the-method-authenticate-of-spring-interface-authenticationmanager-and-provide-implementation-of-passwordencoder"},"4. Implement the method ",(0,o.kt)("strong",{parentName:"h3"},"authenticate")," of Spring interface ",(0,o.kt)("strong",{parentName:"h3"},"AuthenticationManager")," and provide implementation of ",(0,o.kt)("strong",{parentName:"h3"},"PasswordEncoder")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="org.irushu.login.security.CustomAuthenticationManager"',title:'"org.irushu.login.security.CustomAuthenticationManager"'},'package org.irushu.login.security;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\n\n@Slf4j\n@Component\npublic class CustomAuthenticationManager implements AuthenticationManager {\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Bean\n    protected PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\n        UserDetails userDetail = userDetailsService.loadUserByUsername(authentication.getName());\n    \n        if (!passwordEncoder().matches(authentication.getCredentials().toString(), userDetail.getPassword())) {\n            throw new BadCredentialsException("Wrong password");\n        }\n        return new UsernamePasswordAuthenticationToken(userDetail.getUsername(), userDetail.getPassword(), userDetail.getAuthorities());\n    }\n\n}\n')),(0,o.kt)("h3",{id:"5-configure-securityfilterchain-for-spring-web-mvc"},"5. Configure ",(0,o.kt)("strong",{parentName:"h3"},"SecurityFilterChain")," for Spring Web MVC"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="org.irushu.login.security.CustomAuthenticationManager"',title:'"org.irushu.login.security.CustomAuthenticationManager"'},'package org.irushu.login.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig{\n    @Autowired\n    private AuthenticationFilter authenticationFilter;\n\n    private static final String[] AUTH_WHITELIST = {\n            // -- Swagger UI v2\n            "/v2/api-docs",\n            "/swagger-resources",\n            "/swagger-resources/**",\n            "/configuration/ui",\n            "/configuration/security",\n            "/swagger-ui.html",\n            "/webjars/**",\n            // -- Swagger UI v3 (OpenAPI)\n            "/v3/api-docs/**",\n            "/swagger-ui/**"\n            // other public endpoints of your API may be appended to this array\n    };\n\n    @Bean\n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\n        http.cors().and().csrf().disable()\n            .sessionManagement()\n            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            .and()\n            .authenticationManager(new CustomAuthenticationManager())\n            .authorizeHttpRequests((authz) -> authz\n                .requestMatchers(HttpMethod.POST, "/login").permitAll()\n                .requestMatchers( AUTH_WHITELIST).permitAll()\n                .anyRequest().authenticated()\n            ).addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n        configuration.addAllowedOriginPattern(CorsConfiguration.ALL);\n        configuration.setAllowedMethods(List.of(CorsConfiguration.ALL));\n        configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration("/**", configuration);\n        return source;\n    }\n\n}\n')),(0,o.kt)("h3",{id:"6-create-jwtservice-that-create-jwt-token"},"6. Create ",(0,o.kt)("strong",{parentName:"h3"},"JWTService")," that create JWT token"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="org.irushu.login.service.JWTService"',title:'"org.irushu.login.service.JWTService"'},'package org.irushu.login.service;\n\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport io.jsonwebtoken.security.Keys;\nimport jakarta.servlet.http.HttpServletRequest;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.stereotype.Service;\n\nimport java.security.Key;\nimport java.security.KeyStore;\nimport java.util.Date;\n\n@Slf4j\n@Service\npublic class JWTService {\n\n    static final long EXPIRATIONTIME = 86400000; // 1\n\n    static final String PREFIX = "Bearer";\n\n    // Generate secret key. Only for the demonstration\n    // You should read it from the application configuration\n\n    //static Key key = null;\n    static Key key = Keys.secretKeyFor\n            (SignatureAlgorithm.HS256);\n\n    static {\n        try {\n            ClassPathResource resource = new ClassPathResource("keystore-demo.jks");\n            KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n            keystore.load(resource.getInputStream(), "demo1234".toCharArray());\n\n            key = keystore.getKey("demo-service", "demo1234".toCharArray());\n\n        }\n        catch(Throwable t){\n            log.error("Keystore initialization Exception", t);\n        }\n    }\n\n    // Generate signed JWT token\n    public String getToken(String username) {\n        return Jwts.builder()\n                .setSubject(username)\n                .setExpiration(new Date(System.currentTimeMillis()  + EXPIRATIONTIME))\n                .signWith(key)\n                .compact();\n    }\n\n    // Get a token from request Authorization header,\n    // verify a token and get username\n    public String getAuthUser(HttpServletRequest request) {\n        String token = request.getHeader(HttpHeaders.AUTHORIZATION);\n        if (token != null) {\n            return Jwts.parserBuilder()\n                    .setSigningKey(key)\n                    .build()\n                    .parseClaimsJws(token.replace(PREFIX, ""))\n                    .getBody()\n                    .getSubject();\n        }\n        return null;\n    }\n\n}\n')),(0,o.kt)("h3",{id:"7-create-logincontroller-that-returns-jwt-token-on-successful-authentication"},"7. Create ",(0,o.kt)("strong",{parentName:"h3"},"LoginController")," that returns JWT token on successful authentication"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="org.irushu.login.web.controller.LoginController"',title:'"org.irushu.login.web.controller.LoginController"'},'package org.irushu.login.web.controller;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.irushu.login.service.JWTService;\nimport org.irushu.login.web.model.UserCredentials;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@Slf4j\n@RestController\npublic class LoginController {\n\n    @Autowired\n    private JWTService jwtService;\n    \n    @Autowired\n    AuthenticationManager authenticationManager;\n\n    //@CrossOrigin("http://localhost:3000")\n    @RequestMapping(value="/login", method= RequestMethod.POST)\n    public ResponseEntity<?> getToken(@RequestBody UserCredentials credentials) {\n\n       UsernamePasswordAuthenticationToken creds = new UsernamePasswordAuthenticationToken(\n                        credentials.getUsername(),\n                        credentials.getPassword());\n\n       Authentication auth = authenticationManager.authenticate(creds);\n\n       // Generate token\n       String jwts = jwtService.getToken(auth.getName());\n\n       return ResponseEntity.ok()\n                .header(HttpHeaders.AUTHORIZATION, "Bearer " + jwts)\n                .header(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS,"Authorization")\n                .build();\n    }\n\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="org.irushu.login.web.model.UserCredentials"',title:'"org.irushu.login.web.model.UserCredentials"'},'package org.irushu.login.web.model;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class UserCredentials {\n\n    @Schema(example= "thomasli", title="User name")\n    private String username;\n\n    @Schema(example= "password", title="password")\n    private String password;\n\n}\n')))}g.isMDXComponent=!0}}]);