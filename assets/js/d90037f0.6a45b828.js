"use strict";(self.webpackChunknotesaurus=self.webpackChunknotesaurus||[]).push([[6788],{1866:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));a(1839);const r={sidebar_position:2},i="Core Java",o={unversionedId:"java/core",id:"java/core",title:"Core Java",description:"Below notes are based on the book OCP Oracle Certified Professional Java SE 17 Developer Study Guide.",source:"@site/docs/java/core.md",sourceDirName:"java",slug:"/java/core",permalink:"/Notesaurus/docs/java/core",draft:!1,editUrl:"https://github.com/athomasliz/Notesaurus/tree/main/docs/java/core.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"JVM",permalink:"/Notesaurus/docs/java/jvm"},next:{title:"Misc",permalink:"/Notesaurus/docs/java/misc"}},s={},p=[{value:"Building Blocks",id:"building-blocks",level:2},{value:"Environment",id:"environment",level:3},{value:"Class Structure",id:"class-structure",level:3},{value:"Field and Method",id:"field-and-method",level:4},{value:"Classes and Source Files",id:"classes-and-source-files",level:4},{value:"main() method",id:"main-method",level:4},{value:"Package and Import",id:"package-and-import",level:3},{value:"Compilation, Execution and JAR files",id:"compilation-execution-and-jar-files",level:3},{value:"Ordering elements in a class",id:"ordering-elements-in-a-class",level:3},{value:"Creating objects",id:"creating-objects",level:3},{value:"Primitive Type and Literals",id:"primitive-type-and-literals",level:3},{value:"Reference Type",id:"reference-type",level:3},{value:"Primitive Type vs Reference Type",id:"primitive-type-vs-reference-type",level:3},{value:"Wrapper Class",id:"wrapper-class",level:3},{value:"Text Block",id:"text-block",level:3},{value:"Declaring variables",id:"declaring-variables",level:3},{value:"Case convention",id:"case-convention",level:3},{value:"Declaring multiple variables",id:"declaring-multiple-variables",level:3},{value:"Initializing variables",id:"initializing-variables",level:3},{value:"Using var for local variable",id:"using-var-for-local-variable",level:3},{value:"Variable scope",id:"variable-scope",level:3},{value:"Garbage collection",id:"garbage-collection",level:3},{value:"Operators",id:"operators",level:2},{value:"Order of operator precedence",id:"order-of-operator-precedence",level:3},{value:"Unary Operators",id:"unary-operators",level:3},{value:"Binary Arithemtic Operators",id:"binary-arithemtic-operators",level:3},{value:"Numeric Promotion",id:"numeric-promotion",level:3},{value:"Assignment Operator",id:"assignment-operator",level:3},{value:"Compound Assignment Operators",id:"compound-assignment-operators",level:3},{value:"Equality Operators",id:"equality-operators",level:3},{value:"Relational Operators",id:"relational-operators",level:3},{value:"Logical Operator",id:"logical-operator",level:3},{value:"Conditional Operator",id:"conditional-operator",level:3},{value:"Ternary Operator",id:"ternary-operator",level:3},{value:"Control Flow Statement",id:"control-flow-statement",level:2},{value:"<em>if</em> statement",id:"if-statement",level:3},{value:"Pattern matching (Java 14)",id:"pattern-matching-java-14",level:4},{value:"<em>switch</em> statement",id:"switch-statement",level:3},{value:"<em>switch</em> expression (Java 14)",id:"switch-expression-java-14",level:4},{value:"<em>while</em> statement",id:"while-statement",level:3},{value:"<em>do while</em> statement",id:"do-while-statement",level:3},{value:"<em>for</em> loop",id:"for-loop",level:3},{value:"<em>for each</em> loop",id:"for-each-loop",level:3},{value:"Branching",id:"branching",level:3},{value:"<em>Optional</em> label",id:"optional-label",level:4},{value:"<em>break</em> statement",id:"break-statement",level:4},{value:"<em>return</em> statement",id:"return-statement",level:4},{value:"Core APIs",id:"core-apis",level:2},{value:"Methods",id:"methods",level:2},{value:"Class Design",id:"class-design",level:2},{value:"Beyond Classes",id:"beyond-classes",level:2},{value:"Lambdas And Functional Interfaces",id:"lambdas-and-functional-interfaces",level:2}],m={toc:p};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"core-java"},"Core Java"),(0,l.kt)("p",null,"Below notes are based on the book ",(0,l.kt)("em",{parentName:"p"},"OCP Oracle Certified Professional Java SE 17 Developer Study Guide"),"."),(0,l.kt)("h2",{id:"building-blocks"},"Building Blocks"),(0,l.kt)("h3",{id:"environment"},"Environment"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"JDK"),": Java Development Kit",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"javac"),": Convert .java (source file) into .class (bytecode)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"java"),": Execute"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"jar"),": Package"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"javadoc"),": Document"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"JRE"),": Java Runtime Environment",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"subset of JDK"),(0,l.kt)("li",{parentName:"ul"},"could not compile"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"IDE"),": Integrated Development Environment")),(0,l.kt)("h3",{id:"class-structure"},"Class Structure"),(0,l.kt)("h4",{id:"field-and-method"},"Field and Method"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Method"),": a.k.a. function / procedure in other languages"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Field"),": a.k.a. variable"),(0,l.kt)("li",{parentName:"ol"},"Method and Field are ",(0,l.kt)("strong",{parentName:"li"},"Member")," of the ",(0,l.kt)("strong",{parentName:"li"},"Class"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"void"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"special return type"),(0,l.kt)("li",{parentName:"ul"},"no value is returned"))),(0,l.kt)("li",{parentName:"ol"},"Method name and parameter types are called the ",(0,l.kt)("strong",{parentName:"li"},"Method Signature"),".")),(0,l.kt)("h4",{id:"classes-and-source-files"},"Classes and Source Files"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Class")," is a ",(0,l.kt)("strong",{parentName:"li"},"top level type"),"."),(0,l.kt)("li",{parentName:"ol"},"You can put two or more classes in a file."),(0,l.kt)("li",{parentName:"ol"},"At most one of the top level type is allowed to be public."),(0,l.kt)("li",{parentName:"ol"},"If you have a public top level type, it must match the filename.")),(0,l.kt)("h4",{id:"main-method"},"main() method"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"main() method is for execution of the program.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public static void main(String[] args)\npublic static void main(String args[])\npublic static void main(String... args)\nfinal public static void main(String... args)\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"public")," is an access modifier."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"static")," is used as no object needs to be created to run the program."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"...")," is called ",(0,l.kt)("inlineCode",{parentName:"li"},"varargs")," variable argument lists."))),(0,l.kt)("li",{parentName:"ol"},"Compile and run the program with commands below:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"javac Test.java\njava Test    \n"))),(0,l.kt)("li",{parentName:"ol"},"File extention must be .java."),(0,l.kt)("li",{parentName:"ol"},"The result of compilation is .class file, i.e. bytecode."),(0,l.kt)("li",{parentName:"ol"},"Shortcut for running single file source code.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"java Test.java\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Skip explicit compilation step."),(0,l.kt)("li",{parentName:"ul"},"This feature is called ",(0,l.kt)("strong",{parentName:"li"},"launching single-file source code")," programs."),(0,l.kt)("li",{parentName:"ul"},"This feature is designed for when your program is one file.")))),(0,l.kt)("h3",{id:"package-and-import"},"Package and Import"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Package is the logical grouping for classes."),(0,l.kt)("li",{parentName:"ol"},"Package name is hierarchical, separated by period ( . ).",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"package org.irushu;\n"))),(0,l.kt)("li",{parentName:"ol"},"Directory structure is related to the package name."),(0,l.kt)("li",{parentName:"ol"},"Import statement tells which package to look in for classes.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"import org.irushu.MyClass;\n"))),(0,l.kt)("li",{parentName:"ol"},"Use ",(0,l.kt)("strong",{parentName:"li"},"wildcard")," to import all the classes of a package.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"import org.irushu.*;\n"))),(0,l.kt)("li",{parentName:"ol"},"Wildcard can help shorten import list."),(0,l.kt)("li",{parentName:"ol"},"Importing a lot of classes will not slow down execution time."),(0,l.kt)("li",{parentName:"ol"},"Below are limitations for import statements.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Wildcard can only match class names, but it cannot match directories or subdirectories."),(0,l.kt)("li",{parentName:"ul"},"There can only be 1 wildcard, and it must be placed at the end."),(0,l.kt)("li",{parentName:"ul"},"Import statement can only be used to match class names. It cannot match methods or fields."))),(0,l.kt)("li",{parentName:"ol"},"Naming conflicts",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Class names don't have to be unique across all of Java."),(0,l.kt)("li",{parentName:"ul"},"The class name you imported are therefore can be found in multiple places."),(0,l.kt)("li",{parentName:"ul"},"Explicitly importing a class name will take precedence over any wildcard present.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"import java.util.Date; // This will win\nimport java.sql.*;\n"))),(0,l.kt)("li",{parentName:"ul"},"In case you need a class name from 2 different packages, use ",(0,l.kt)("em",{parentName:"li"},"fully qualified class name")," to declare the fields.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"java.util.Date utilDate;\njava.sql.Date sqlDate;\n"))))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"java.lang")," are automatically imported."),(0,l.kt)("li",{parentName:"ol"},"Classes in the same package are automatically imported.")),(0,l.kt)("h3",{id:"compilation-execution-and-jar-files"},"Compilation, Execution and JAR files"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"You can compile as below.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"javac org/irushu/test/Test.java\njavac org/irushu/test/*.java\njavac *.java // This won't compile the source file in package org.irush.test\n"))),(0,l.kt)("li",{parentName:"ol"},"You can use ",(0,l.kt)("strong",{parentName:"li"},"-d")," to place class files in a different directory.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"javac -d classes org/irushu/test/Test.java\n"))),(0,l.kt)("li",{parentName:"ol"},"You can specify the classpath for required libraries to compile the program."),(0,l.kt)("li",{parentName:"ol"},"You can specify the classpath and run the program.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"java -cp classes org.irushu.test.Test\njava -classpath classes org.irushu.test.Test\njava --class-path classes org.irushu.test.Test\n"))),(0,l.kt)("li",{parentName:"ol"},"You can create jar file as below.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"jar -cvf test.jar .\njar -cvf test.jar -C classes . // -C specify the location that contains the class files\njar --create --verbose --file test.jar .\n")))),(0,l.kt)("h3",{id:"ordering-elements-in-a-class"},"Ordering elements in a class"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Elements should be ordered in a class as below.",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"Package declaration"),(0,l.kt)("li",{parentName:"ol"},"Import statement"),(0,l.kt)("li",{parentName:"ol"},"Top level type declaration (Class / Interface / Enum)"),(0,l.kt)("li",{parentName:"ol"},"Field declaration"),(0,l.kt)("li",{parentName:"ol"},"Method declaration")))),(0,l.kt)("h3",{id:"creating-objects"},"Creating objects"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"You can define ",(0,l.kt)("strong",{parentName:"li"},"constructor")," for creation of objects."),(0,l.kt)("li",{parentName:"ol"},"Below is an example of constructor. Note it does not have return type.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public class Test{\n    public Test(){\n        // do something\n    }\n}\n"))),(0,l.kt)("li",{parentName:"ol"},"If you don't provide a constructor, compiler will supply a do nothing default constructor for you."),(0,l.kt)("li",{parentName:"ol"},"You can create object with the ",(0,l.kt)("strong",{parentName:"li"},"new")," keyword.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Test test = new Test();\n"))),(0,l.kt)("li",{parentName:"ol"},"One can read and write instance variables directly from the caller. ",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Test{\n    String helloWorld = "Hello World";\n    public static void main(String... args){\n        Test test = new Test();\n        test.helloWorld = "Happy Valley";\n    }\n}\n'))),(0,l.kt)("li",{parentName:"ol"},"However, one should honour encapsulation and protect instance variables with access modifier."),(0,l.kt)("li",{parentName:"ol"},"One can define ",(0,l.kt)("strong",{parentName:"li"},"Instance initializer")," as below.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Test{\n   {\n        System.out.println("Test");\n   }\n}\n'))),(0,l.kt)("li",{parentName:"ol"},"Order of execution",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Fields and Instance Initializer run in the order they appeared in the file."),(0,l.kt)("li",{parentName:"ul"},"Constructor"))),(0,l.kt)("li",{parentName:"ol"},"Order matters and you can't refer to a variable before it has been defined.")),(0,l.kt)("h3",{id:"primitive-type-and-literals"},"Primitive Type and Literals"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"There are 8 primitive types.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"byte")," (8), ",(0,l.kt)("strong",{parentName:"li"},"short")," (16), ",(0,l.kt)("strong",{parentName:"li"},"int")," (32), ",(0,l.kt)("strong",{parentName:"li"},"long")," (64)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Signed"),(0,l.kt)("li",{parentName:"ul"},"Each numeric type is twice the size as the smaller similar type."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"float")," (32), ",(0,l.kt)("strong",{parentName:"li"},"double")," (64)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Signed"),(0,l.kt)("li",{parentName:"ul"},"Each decimal type is twice the size as the smaller similar type."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"char")," (8)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Unsigned"),(0,l.kt)("li",{parentName:"ul"},"short and char values can be casted to one another as their underlying data size is the same."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"boolean"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"bit size depends on JVM implementation"))))),(0,l.kt)("li",{parentName:"ol"},"When a number, decimal, String or character is present in the code, they are called ",(0,l.kt)("strong",{parentName:"li"},"literals"),"."),(0,l.kt)("li",{parentName:"ol"},"By default java interprets numeric value as int."),(0,l.kt)("li",{parentName:"ol"},"To specify the numeric literal as long, add l or L at the end of it."),(0,l.kt)("li",{parentName:"ol"},"By default java interprets decimal value as double."),(0,l.kt)("li",{parentName:"ol"},"To specify the decimal literal as float, add f or F at the end of it.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// This will error\nfloat a = 2.0; // Cannot compile\n# highlight-next-line\nfloat b = 2.0f;\n"))),(0,l.kt)("li",{parentName:"ol"},"Although float values can be declared with an f suffix, they are not printed with an f suffix.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"float b = 2.0f;\nSystem.out.println(b); // It will print 0.0\n"))),(0,l.kt)("li",{parentName:"ol"},"One can specify a number by ",(0,l.kt)("strong",{parentName:"li"},"changing base"),". By default it is using decimal number system.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int a = 017; // Octal (0-7)\nint b = 0xFF; // Hexadecimal (0-9 a-f A-F)\nint c = 0B101; // Binary (0-1)\nSystem.out.println(a); // Print 15\nSystem.out.println(b); // Print 255\nSystem.out.println(c); // Print 5\n"))),(0,l.kt)("li",{parentName:"ol"},"You can put underscores in numbers. ",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int value = 1_000_000;\n"))),(0,l.kt)("li",{parentName:"ol"},"You cannot put underscore at the beginning or end of a literal, or right before or after a decimal point.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// This will error\ndouble a = _999.00; // CANNOT COMPILE\n// This will error\ndouble b = 999.00_; // CANNOT COMPILE\n// This will error\ndouble c = 999._00; // CANNOT COMPILE\n// This will error\ndouble d = 999_.00; // CANNOT COMPILE\n")))),(0,l.kt)("h3",{id:"reference-type"},"Reference Type"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"A ",(0,l.kt)("strong",{parentName:"li"},"reference type")," refers to an object."),(0,l.kt)("li",{parentName:"ol"},"A ",(0,l.kt)("strong",{parentName:"li"},"reference")," \u201cpoints\u201d to an object by storing the memory address where the object is located."),(0,l.kt)("li",{parentName:"ol"},"A reference is like a ",(0,l.kt)("strong",{parentName:"li"},"pointer"),"."),(0,l.kt)("li",{parentName:"ol"},"A reference can be assigned to another object."),(0,l.kt)("li",{parentName:"ol"},"A reference can be assigned to new object.")),(0,l.kt)("h3",{id:"primitive-type-vs-reference-type"},"Primitive Type vs Reference Type"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Primitive types have lowercase type names."),(0,l.kt)("li",{parentName:"ol"},"Reference types have uppercase type names."),(0,l.kt)("li",{parentName:"ol"},"Reference types can be used to call methods."),(0,l.kt)("li",{parentName:"ol"},"Primitive types do not have methods declared on them."),(0,l.kt)("li",{parentName:"ol"},"If primitive types are unknown, assign null to their wrapper class.")),(0,l.kt)("h3",{id:"wrapper-class"},"Wrapper Class"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"valueOf to convert to wrapper class.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'Integer a = Integer.valueOf("456"); // Wrapper\nint b = Integer.parseInt("789"); // Primitive\n'))),(0,l.kt)("li",{parentName:"ol"},"Number classes, Boolean and Character Wrapper classes have userful helper methods:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"byteValue(), shortValue(), intValue(), longValue()"),(0,l.kt)("li",{parentName:"ul"},"floatValue(), doubleValue()"),(0,l.kt)("li",{parentName:"ul"},"booleanValue()"),(0,l.kt)("li",{parentName:"ul"},"charValue()"))),(0,l.kt)("li",{parentName:"ol"},"Helper classes do their best to convert values but can result in a loss of precision.")),(0,l.kt)("h3",{id:"text-block"},"Text Block"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},'"""')," as Start text block and End text block."),(0,l.kt)("li",{parentName:"ol"},"Incidental whitespace"),(0,l.kt)("li",{parentName:"ol"},"Essential whitespace"),(0,l.kt)("li",{parentName:"ol"},"Escape characters")),(0,l.kt)("h3",{id:"declaring-variables"},"Declaring variables"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Identifiers must begin with letter, a currency symbol or undercore symbol _ ."),(0,l.kt)("li",{parentName:"ol"},"Currency symbol includes dollar ($), yuan (\xa5), euro (\u20ac)."),(0,l.kt)("li",{parentName:"ol"},"A single underscore is not allowed."),(0,l.kt)("li",{parentName:"ol"},"Cannot use reserve word."),(0,l.kt)("li",{parentName:"ol"},"Cannot use literal values like true, false or null.")),(0,l.kt)("h3",{id:"case-convention"},"Case convention"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Method or Field names are declared as ",(0,l.kt)("strong",{parentName:"li"},"lowercase camel")," case."),(0,l.kt)("li",{parentName:"ol"},"Constants or enum values are declared as ",(0,l.kt)("strong",{parentName:"li"},"uppercase snake")," case."),(0,l.kt)("li",{parentName:"ol"},"Class and Interface names are declared as ",(0,l.kt)("strong",{parentName:"li"},"uppercase camel")," case.")),(0,l.kt)("h3",{id:"declaring-multiple-variables"},"Declaring multiple variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'String str1, str2, str3="Foo";\n// This will error\nint int1, float float1; // There can only be one type of declaration in a statement.\n// This will error\nString str4, String str5; // You cannot repeat the same declaration in a statement, even they are the same.\ndouble double1; double double2; // Semicolon separates statements, so there is no violation.\n// This will error\nboolean boolean1; boolean2; Invalid declaration for boolean 2 as type is omitted.\n')),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"You can declare many variables in the same declaration as long as they are all of the same type."),(0,l.kt)("li",{parentName:"ol"},"You cannot repeat the same declaration."),(0,l.kt)("li",{parentName:"ol"},"There can only be one declaration, no other declaration can be made.")),(0,l.kt)("h3",{id:"initializing-variables"},"Initializing variables"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Local variable")," is a variable defined within a constructor, method, or initializer block."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"final")," modifier is equivalent to declaring constants."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"final")," modifier can apply to local variable."),(0,l.kt)("li",{parentName:"ol"},"For ",(0,l.kt)("inlineCode",{parentName:"li"},"final")," variable of primitive type, you cannot change its value once it is initiailized."),(0,l.kt)("li",{parentName:"ol"},"For ",(0,l.kt)("inlineCode",{parentName:"li"},"final")," variable of reference type, you cannot change the reference, but you can modify the content the reference points to."),(0,l.kt)("li",{parentName:"ol"},"Local variables do not have ",(0,l.kt)("strong",{parentName:"li"},"default value"),"."),(0,l.kt)("li",{parentName:"ol"},"Local variables must be initialized before use."),(0,l.kt)("li",{parentName:"ol"},"For local variables that have never be used, compiler doesn't care if they are not initialized."),(0,l.kt)("li",{parentName:"ol"},"Compiler is clever enough to determine whether the local variable has been used or not."),(0,l.kt)("li",{parentName:"ol"},"If you pass uninitialized parameters to constructor or method, the program will fail to compile."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Instance variable")," is a field defined within a specific instance of object."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Class variable")," is defined on the class level and shared among all instances of the class."),(0,l.kt)("li",{parentName:"ol"},"Both instance and class variables are given a default value once declared. You don't need to initialize them."),(0,l.kt)("li",{parentName:"ol"},"Initialization of instance and class variables sticks to below rules.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"null for an object"),(0,l.kt)("li",{parentName:"ul"},"0 for numeric types"),(0,l.kt)("li",{parentName:"ul"},"0.0 for decimal types"),(0,l.kt)("li",{parentName:"ul"},"false for boolean"),(0,l.kt)("li",{parentName:"ul"},"'\\u000' for char"))),(0,l.kt)("li",{parentName:"ol"},"Java does not support setting default method parameter values.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"    // This will error\n    public void method(int hello = 3){\n    }\n")))),(0,l.kt)("h3",{id:"using-var-for-local-variable"},"Using var for local variable"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"You can use keyword ",(0,l.kt)("inlineCode",{parentName:"li"},"var")," to declare local variables under certain circumstances."),(0,l.kt)("li",{parentName:"ol"},"This feature is called ",(0,l.kt)("strong",{parentName:"li"},"local variable type inference"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"var")," is ",(0,l.kt)("strong",{parentName:"li"},"only")," used for ",(0,l.kt)("strong",{parentName:"li"},"local variables"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"var")," will instruct the compiler to determine the type."),(0,l.kt)("li",{parentName:"ol"},"In javascript, ",(0,l.kt)("inlineCode",{parentName:"li"},"var")," can take on any type."),(0,l.kt)("li",{parentName:"ol"},"But in java, compiler will determine the specific type for ",(0,l.kt)("inlineCode",{parentName:"li"},"var"),". The type cannot be changed during runtime."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"var")," variable cannot be initialized to null during declaration. Compiler cannot infer its type."),(0,l.kt)("li",{parentName:"ol"},"If the underlying type is a reference type, ",(0,l.kt)("inlineCode",{parentName:"li"},"var")," variable can be reassigned with null value after declaration."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"var")," cannot be used in multiple variable assignment."),(0,l.kt)("li",{parentName:"ol"},"For ",(0,l.kt)("inlineCode",{parentName:"li"},"var"),", compiler will look only at the line of declaration. variable must be assigned values on the lines where they are defined.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'void methodA(){\n    var a = "String A";\n    var b\n        = 5;\n    // This will error\n    var c; // var variable is not assigned with values on the same line they are declared.\n    c = 1;\n    // This will error\n    var d = null; // compiler cannot infer the type\n    var e = "String B";\n    e = null;\n    // This will error  \n    var f = 2, g = 2; // var cannot be used in multiple variable assignment\n}\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"var")," cannot be used on method parameters.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"}," // This will error\n void methodB(var a, var b){\n \n }\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"var")," is not a reserved word and allowed to be used as an identifier.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'void methodC(){\n    {/* highlight-start */}\n    var var = "hello"; // This will compile\n    {/* highlight-end */}\n}\n')))),(0,l.kt)("h3",{id:"variable-scope"},"Variable scope"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"A set of braces means a new code block."),(0,l.kt)("li",{parentName:"ol"},"Each code block has its own scope."),(0,l.kt)("li",{parentName:"ol"},"Code block can contain another code block. "),(0,l.kt)("li",{parentName:"ol"},"Inner block can reference variables of outer block, but not vice versa."),(0,l.kt)("li",{parentName:"ol"},"Scope for different type of varibles",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Local variable: In scope from declaration to the end of the block."),(0,l.kt)("li",{parentName:"ul"},"Method parameters: In scope for the duration of the method."),(0,l.kt)("li",{parentName:"ul"},"Instance variable: In scope from declaration until the object is eligible for gc."),(0,l.kt)("li",{parentName:"ul"},"Class variable: In scope from declaration to end of the program.")))),(0,l.kt)("h3",{id:"garbage-collection"},"Garbage collection"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"For details, refers to ",(0,l.kt)("a",{parentName:"li",href:"/Notesaurus/docs/java/jvm"},"JVM section"),"."),(0,l.kt)("li",{parentName:"ol"},"System.gc() is not guranteed to do anything. JVM can ignore it.")),(0,l.kt)("h2",{id:"operators"},"Operators"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"An ",(0,l.kt)("strong",{parentName:"li"},"operator")," is a special symbol or operation that can be applied to operands."),(0,l.kt)("li",{parentName:"ol"},"An ",(0,l.kt)("strong",{parentName:"li"},"operand")," is the variable / literal / value the operator being applied to."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"unary"),", ",(0,l.kt)("strong",{parentName:"li"},"binary")," and ",(0,l.kt)("strong",{parentName:"li"},"tenary")," operator take 1, 2 and 3 operand(s) respectively."),(0,l.kt)("li",{parentName:"ol"},"Evaluation can be ",(0,l.kt)("strong",{parentName:"li"},"left-to-right")," or ",(0,l.kt)("strong",{parentName:"li"},"right-to-left"),"."),(0,l.kt)("li",{parentName:"ol"},"Some operators require the operand of specific type.")),(0,l.kt)("h3",{id:"order-of-operator-precedence"},"Order of operator precedence"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Operator should follow below orders"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"Symbols"),(0,l.kt)("th",{parentName:"tr",align:null},"Evaluation"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Post-unary operators"),(0,l.kt)("td",{parentName:"tr",align:null},"expression++, expression--"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pre-unary operators"),(0,l.kt)("td",{parentName:"tr",align:null},"++expression, --expression"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Other unary operators"),(0,l.kt)("td",{parentName:"tr",align:null},"-, !, ~, +, (type)"),(0,l.kt)("td",{parentName:"tr",align:null},"Right-to-left")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Cast\t(Type)"),(0,l.kt)("td",{parentName:"tr",align:null},"reference"),(0,l.kt)("td",{parentName:"tr",align:null},"Right-to-left")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Multiplication/division/modulus"),(0,l.kt)("td",{parentName:"tr",align:null},"*, /, %"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Addition/subtraction"),(0,l.kt)("td",{parentName:"tr",align:null},"+, -"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Shift operators"),(0,l.kt)("td",{parentName:"tr",align:null},"<<, >>, >>>"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Relational operators"),(0,l.kt)("td",{parentName:"tr",align:null},"<, >, <=, >=, instanceof"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Equal to/not equal to"),(0,l.kt)("td",{parentName:"tr",align:null},"==, !="),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Logical AND"),(0,l.kt)("td",{parentName:"tr",align:null},"&"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Logical exclusive OR"),(0,l.kt)("td",{parentName:"tr",align:null},"^"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Logical inclusive OR"),(0,l.kt)("td",{parentName:"tr",align:null},"|"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Conditional AND"),(0,l.kt)("td",{parentName:"tr",align:null},"&&"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Conditional OR"),(0,l.kt)("td",{parentName:"tr",align:null},"|","|"),(0,l.kt)("td",{parentName:"tr",align:null},"LR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Ternary operators"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean expression ? expression1 : expression2"),(0,l.kt)("td",{parentName:"tr",align:null},"Right-to-left")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Assignment operators"),(0,l.kt)("td",{parentName:"tr",align:null},"=, +=, -=, *=, /=, %=, &=, ^=, ","|","=, <<=, >>=, >>>="),(0,l.kt)("td",{parentName:"tr",align:null},"Right-to-left")))))),(0,l.kt)("h3",{id:"unary-operators"},"Unary Operators"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Requires exactly one operand to function."),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"Examples"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Logical complement"),(0,l.kt)("td",{parentName:"tr",align:null},"!a"),(0,l.kt)("td",{parentName:"tr",align:null},"Inverts a boolean's logical value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Bitwise complement"),(0,l.kt)("td",{parentName:"tr",align:null},"~b"),(0,l.kt)("td",{parentName:"tr",align:null},"Inverts all 0s and 1s in a number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Plus"),(0,l.kt)("td",{parentName:"tr",align:null},"+c"),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates a number is positive")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Negation or minus"),(0,l.kt)("td",{parentName:"tr",align:null},"-d"),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates a literal number is negative or negates an expression")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Increment"),(0,l.kt)("td",{parentName:"tr",align:null},"++e f++"),(0,l.kt)("td",{parentName:"tr",align:null},"Increments a value by 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Decrement"),(0,l.kt)("td",{parentName:"tr",align:null},"--f h--"),(0,l.kt)("td",{parentName:"tr",align:null},"Decrements a value by 1"))))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Bitwise complement operator ( ~ )")," flips all 0s and 1s in a number. ")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Bitwise complement operator can apply only on byte, short, int, long, char.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"You can use the formula ",(0,l.kt)("inlineCode",{parentName:"p"},"bitwise complement = -1 * number value -1")," to calculate the result for bitwise complement operation."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int a = 7;\nSystem.out.println(~a); // Print -8. Because -1 * 7 - 1 \n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Negation operator ( - )")," reverses the sign of numeric expression.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Negation operator can apply only on numeric expression.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Increment and decrement operators ( ++ -- )")," can apply only on numeric variable.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"The order on how Increment and decrement operators attached to the variable can change the behavior."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"++x / --y"),": increase / decrease by 1 and return the ",(0,l.kt)("strong",{parentName:"li"},"new value"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"x++ / y--"),": increase / decrease by 1 but return the ",(0,l.kt)("strong",{parentName:"li"},"original value"),".")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int a = 1;\nSystem.out.println(++a); // print 2\nSystem.out.println(a++); // print 2\nSystem.out.println(a); // print 3\n")))),(0,l.kt)("h3",{id:"binary-arithemtic-operators"},"Binary Arithemtic Operators"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Addition: ",(0,l.kt)("inlineCode",{parentName:"li"},"a + b")),(0,l.kt)("li",{parentName:"ol"},"Subtraction: ",(0,l.kt)("inlineCode",{parentName:"li"},"a - b")),(0,l.kt)("li",{parentName:"ol"},"Multiplication: ",(0,l.kt)("inlineCode",{parentName:"li"},"a * b")),(0,l.kt)("li",{parentName:"ol"},"Division: ",(0,l.kt)("inlineCode",{parentName:"li"},"a / b")),(0,l.kt)("li",{parentName:"ol"},"Modulus: ",(0,l.kt)("inlineCode",{parentName:"li"},"a % b")),(0,l.kt)("li",{parentName:"ol"},"Arithmetic operators can apply on all primitives, except boolean."),(0,l.kt)("li",{parentName:"ol"},"Addition operators ( + ) can apply on String for concatenation."),(0,l.kt)("li",{parentName:"ol"},"You can change the precedence by wrapping with ",(0,l.kt)("strong",{parentName:"li"},"parentheses"),"."),(0,l.kt)("li",{parentName:"ol"},"Parentheses should be applied in a ",(0,l.kt)("em",{parentName:"li"},"valid")," and ",(0,l.kt)("em",{parentName:"li"},"balanced")," manner.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A new right parentheses match with a previous left parentheses"),(0,l.kt)("li",{parentName:"ul"},"Equal number of left and right parentheses"))),(0,l.kt)("li",{parentName:"ol"},"For ",(0,l.kt)("strong",{parentName:"li"},"integer")," values, ",(0,l.kt)("strong",{parentName:"li"},"division")," results in the ",(0,l.kt)("strong",{parentName:"li"},"floor value")," (value without anything after the decimal point) of the nearest integer that fulfills the operation.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"System.out.println(13 / 4); // Prints 3\n")))),(0,l.kt)("h3",{id:"numeric-promotion"},"Numeric Promotion"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Numeric Promotion rules",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If two values have different data types, promote one of the values to the larger of the two data types.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int a = 1;\nlong b = 2;\nvar c = a + b; // a will be promoted to long. c will be long.\n"))),(0,l.kt)("li",{parentName:"ul"},"If one is integral and the other is floating-point, promote the integral value to the floating-point value's data type.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int a = 1;\nfloat b = 2.1f;\nvar c = a + b; // a will be promoted to float. c will be float.\n"))),(0,l.kt)("li",{parentName:"ul"},"Smaller data types, namely, byte, short, and char, are first promoted to int, even if neither of the operands is int. ",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"byte a = 1;\nshort b = 2;\nvar c = a + b; // a and b will be promoted to int. c will be int.\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Unary operators are ",(0,l.kt)("strong",{parentName:"li"},"excluded")," from this rule."))),(0,l.kt)("li",{parentName:"ul"},"Resulting value will have the same data type as its promoted operands."))),(0,l.kt)("li",{parentName:"ol"},"Be aware of the data type of variables, intermediate values, and resulting values")),(0,l.kt)("h3",{id:"assignment-operator"},"Assignment Operator"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Binary operator that assigns variable on the left side with the result of the equation on the right side."),(0,l.kt)("li",{parentName:"ol"},"Promotion rule and Casting will occur during assignment."),(0,l.kt)("li",{parentName:"ol"},"Automatically promote from smaller to larger data type.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"short a = 10;\nbyte b = 20;\nint c = a + b;\nlong d = a + b;\nfloat e = a + b;\ndouble f = a + b;\nSystem.out.println(c); // Print 30\nSystem.out.println(d); // Print 30\nSystem.out.println(e); // Print 30.0\nSystem.out.println(f); // Print 30.0\n"))),(0,l.kt)("li",{parentName:"ol"},"Compilation error occurs if you try to promote from larger to smaller data type without casting."),(0,l.kt)("li",{parentName:"ol"},"Casting is a unary operation."),(0,l.kt)("li",{parentName:"ol"},"Compiler automatically casts smaller types to larger ones."),(0,l.kt)("li",{parentName:"ol"},"Casting is required when converting to smaller data type."),(0,l.kt)("li",{parentName:"ol"},"Casting is performed by placing the data type, enclosed in parentheses, to the left of the value you want to cast.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"short a = (short) 10;\nfloat b = 10;\nfloat c = (float) 10.0;\nfloat d = 10.0f;\n// This will error\nfloat e = 10.0;\n"))),(0,l.kt)("li",{parentName:"ol"},"Casting can also be applied to object and reference."),(0,l.kt)("li",{parentName:"ol"},"No conversion is performed for casting of object / reference."),(0,l.kt)("li",{parentName:"ol"},"Casting an object only change the reference of the object, not the object itself."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Overflow")," is when a number is so large that it will no longer fit within the data type, so the system \u201cwraps around\u201d to the lowest negative value and counts up from there.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int a = (byte)( Byte.MAX_VALUE + 1 );\nSystem.out.println(a); // Print -128\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Underflow")," is analogy to overflow when the number is too low to fit in the data type.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int a = (byte)( Byte.MIN_VALUE - 1 );\nSystem.out.println(a); // Print 127\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Casting")," can appear anywhere in an expression, not just an assignment."),(0,l.kt)("li",{parentName:"ol"},"Compiler ",(0,l.kt)("strong",{parentName:"li"},"doesn't require casting when working with literals")," that fit into data types.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"byte a = 1;\n// This will error\nbyte b = (byte) a * 2; // Because a is involved in the multiplication, third promotion rule applys, and a is casted to int during multiplication.\n# highlight-next-line\nbyte c = 10 * 2; // Doesn't require casting\n// This will error\nbyte d = 100 * 200; // Overflow occurs and compilers report error\n// This will error\nint e = 2 * 5.0;\n// This will error\nfloat f = 2 * 5.0;\n# highlight-next-line\nfloat g = 2 * 5.0f;\n# highlight-next-line\ndouble h = 2 * 5.0;\n"))),(0,l.kt)("li",{parentName:"ol"},"When working with ",(0,l.kt)("strong",{parentName:"li"},"literals / value"),", the compiler has enough information for the programmer's intent."),(0,l.kt)("li",{parentName:"ol"},"When working with ",(0,l.kt)("strong",{parentName:"li"},"variables"),", there is ambiguity about how to proceed, and the compilers will throw error."),(0,l.kt)("li",{parentName:"ol"},"Result of assignment for the expression is equal to the value of the assignment.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int a = 5;\nint b = ( a = 10 ); // First 10 is assigned to a. Then the whole expression a = 10 returns 10.\nSystem.out.println(a); // Print 10\nSystem.out.println(b); // Print 10\n")))),(0,l.kt)("h3",{id:"compound-assignment-operators"},"Compound Assignment Operators"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Addition assignment: a += 10"),(0,l.kt)("li",{parentName:"ol"},"Subtraction assignment: b -= 10"),(0,l.kt)("li",{parentName:"ol"},"Multiplication assignment: c *= 10"),(0,l.kt)("li",{parentName:"ol"},"Division assignment: d /= 10"),(0,l.kt)("li",{parentName:"ol"},"Compound assignment is a glorified form of simple assignment. It performs the following:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"built-in operation that applies the left and right side of statement."),(0,l.kt)("li",{parentName:"ul"},"assigns the resulting value on the left side variable."),(0,l.kt)("li",{parentName:"ul"},"compiler will automatically perform casting during assignment.")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"    int a = 10;\n    long b = 100;\n    // This will error\n    a = a * b; // Compilation error as long type is assigned to int type\n    // This will error\n    a = (int) a * b; // Compilation error as casting applied to a only, and then promotes to long again during multiplication\n    # highlight-next-line\n    a = (int) (a * b); // Implicit casting from long to int\n    # highlight-next-line\n    a *= b; // Explicit casting from long to int\n")))),(0,l.kt)("h3",{id:"equality-operators"},"Equality Operators"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Equality ",(0,l.kt)("inlineCode",{parentName:"li"},"==")," and Inequality ",(0,l.kt)("inlineCode",{parentName:"li"},"!="),"."),(0,l.kt)("li",{parentName:"ol"},"For object type, we need to distinguish if",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"2 objects are the same. (Using equality operator)"),(0,l.kt)("li",{parentName:"ul"},"2 objects are equivalent. (Using equals method)"))),(0,l.kt)("li",{parentName:"ol"},"For object comparison, equality operator is applied to reference, not to the object that reference point to."),(0,l.kt)("li",{parentName:"ol"},"For primitive type, there is no such distinction."),(0,l.kt)("li",{parentName:"ol"},"Equality Operators must apply on the same type.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'int a = 1;\nfloat b = 2.0f;\nboolean c = true;\nString d = "true";\nint a1 = 1;\nfloat b1 = 3.0f;\nboolean c1 = true;\n# highlight-next-line\nSystem.out.println( a == b ); // Promotion rule to promote a to float\n// This will error\nSystem.out.println( b == c ); // Compilation error due to comparison between mixed type\n// This will error\nSystem.out.println( c == d ); // Compilation error due to comparison between mixed type\n# highlight-next-line\nSystem.out.println( a == a1 );\n# highlight-next-line\nSystem.out.println( b == b1 );\n# highlight-next-line\nSystem.out.println( c == c1 );\n'))),(0,l.kt)("li",{parentName:"ol"},"Comparing null with null will return true in java.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"System.out.println( null == null ); // Print true\n")))),(0,l.kt)("h3",{id:"relational-operators"},"Relational Operators"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},">"),", ",(0,l.kt)("inlineCode",{parentName:"li"},">="),", ",(0,l.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"<="),", ",(0,l.kt)("inlineCode",{parentName:"li"},"instanceof")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"instanceof")," tests whether the target object is a member of a particular class or interface at runtime."),(0,l.kt)("li",{parentName:"ol"},"If the compiler can determine that a variable cannot possibly be cast to a specific class, it reports an error.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Integer x = 1;\n// This will error\nif(x instanceof String){\n    // Do something\n}\n"))),(0,l.kt)("li",{parentName:"ol"},"instanceof on a null literal / reference will always return false.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'String a = null;\nString b = "Hello World";\nSystem.out.println( null instanceof Object ); // Print false\nSystem.out.println( a instanceof String ); // Print false\nSystem.out.println( b instanceof Object ); // Print true\nSystem.out.println( b instanceof String ); // Print true\n'))),(0,l.kt)("li",{parentName:"ol"},"null cannot be used on the right side of instanceof.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"String a = null;\n// This will error\nSystem.out.println( a instanceof null );\n")))),(0,l.kt)("h3",{id:"logical-operator"},"Logical Operator"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Logical AND ",(0,l.kt)("inlineCode",{parentName:"li"},"&"),": true when both operands are true."),(0,l.kt)("li",{parentName:"ol"},"Logical OR ",(0,l.kt)("inlineCode",{parentName:"li"},"|"),": true when at least one of operands is true."),(0,l.kt)("li",{parentName:"ol"},"Logical XOR ",(0,l.kt)("inlineCode",{parentName:"li"},"^"),": true when operands are different to each other.")),(0,l.kt)("h3",{id:"conditional-operator"},"Conditional Operator"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Conditional AND ",(0,l.kt)("inlineCode",{parentName:"li"},"&&"),": true when both operands are true."),(0,l.kt)("li",{parentName:"ol"},"Conditional OR ",(0,l.kt)("inlineCode",{parentName:"li"},"||"),": true when at least one of operands is true."),(0,l.kt)("li",{parentName:"ol"},"Short-circuit",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"For &&, if left side is false, right side will not be evaluated."),(0,l.kt)("li",{parentName:"ul"},"For ||, if left side is true, right side will not be evaluated."))),(0,l.kt)("li",{parentName:"ol"},"Avoid null pointer exception.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'String a = null;\nif( a != null && a.equals("Hello World")){ // Since a is null, if will short circuit immediately, and avoid NullPointerException on the right side\n}\n// This will error\nif( a != null & a.equals("Hello World")){ // Throw NullPointerException at runtime\n}\n')))),(0,l.kt)("h3",{id:"ternary-operator"},"Ternary Operator"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"(boolean expression) ? ( expression that returned if boolean is true) : ( expression that returned if boolean is false)"),(0,l.kt)("li",{parentName:"ol"},"Second and third expressions in ternary operations don't need to be the same data type.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"int a = 5;\nlong b = 10;\nint c = (int)((true) ? b : a);\nSystem.out.println(c); // Print 10\n"))),(0,l.kt)("li",{parentName:"ol"},"Second and third expressions must make sense for the data type. Compiler can detect wrong data type.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'int a = 5;\n// This will error\nint c = (int)((false) ? "Hello" : a);\n'))),(0,l.kt)("li",{parentName:"ol"},"Only one of the expression on the right will be evaluated at runtime. Beware of ",(0,l.kt)("strong",{parentName:"li"},"unperformed side effect"),".")),(0,l.kt)("h2",{id:"control-flow-statement"},"Control Flow Statement"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("em",{parentName:"li"},"Control Flow Statement")," break up the flow of execution by",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Decision making"),(0,l.kt)("li",{parentName:"ul"},"Looping"),(0,l.kt)("li",{parentName:"ul"},"Branching"))),(0,l.kt)("li",{parentName:"ol"},"Target can be a single statement or block of statements."),(0,l.kt)("li",{parentName:"ol"},"Using block is often preferred.")),(0,l.kt)("h3",{id:"if-statement"},(0,l.kt)("em",{parentName:"h3"},"if")," statement"),(0,l.kt)("h4",{id:"pattern-matching-java-14"},"Pattern matching (Java 14)"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Java 16 introduces ",(0,l.kt)("strong",{parentName:"li"},"pattern matching")," for if statement using instanceof.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='if statement'",title:"'if","statement'":!0},"if(baobao instanceof Dog){\n    Dog dog = (Dog) baobao;\n    dog.bark();\n}\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='if statement (With pattern matching)'",title:"'if",statement:!0,"(With":!0,pattern:!0,"matching)'":!0},"if(baobao instanceof Dog dog ){\n    dog.bark();\n}\n"))),(0,l.kt)("li",{parentName:"ol"},"From the above example, ",(0,l.kt)("em",{parentName:"li"},"dog")," is the ",(0,l.kt)("strong",{parentName:"li"},"pattern variable"),". "),(0,l.kt)("li",{parentName:"ol"},"Avoid potential ClassCastException because type casting is performed only if the instanceof statement is true."),(0,l.kt)("li",{parentName:"ol"},"Bad practice to reassign the pattern variable.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"if(baobao instanceof Dog dog ){\n    dog = new SmallDog(); // Bad practice to reassign the pattern variable.\n}\n"))),(0,l.kt)("li",{parentName:"ol"},"Prevent reassignment by ",(0,l.kt)("inlineCode",{parentName:"li"},"final")," modifier.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"if(baobao instanceof final Dog dog ){\n    // Do something\n}\n"))),(0,l.kt)("li",{parentName:"ol"},"Can include && statement to filter.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"if(baobao instanceof final Dog dog \n# highlight-next-line\n    && dog.getAge() > 10 ){\n    // Do something\n}\n"))),(0,l.kt)("li",{parentName:"ol"},"Pattern variable must be a strict subtype. It ",(0,l.kt)("strong",{parentName:"li"},"cannot")," be the ",(0,l.kt)("strong",{parentName:"li"},"same")," type.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Integer a = 1000;\n// This will error\nif(a instanceof Integer b){\n    // Do something\n}\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Flow scoping")," means the variable is in scope only when the compiler can definitely determine its type."),(0,l.kt)("li",{parentName:"ol"},"Even if the variable is not inside the if statement, it can still be deemed in scope by the compiler.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"void test(Number number) { \n    if (!(number instanceof Integer data))\n        return;\n    System.out.println(data.intValue());\n}\n"))),(0,l.kt)("li",{parentName:"ol"},"The System.out.println statement from the previous example is not within if statement. However the compiler determines it is in scope if the instanceof operator returns true."),(0,l.kt)("li",{parentName:"ol"},"We can conclude pattern matching is quite different from other scoping that determined scope by a pair of braces. The scope of pattern matching is determined by compiler.")),(0,l.kt)("h3",{id:"switch-statement"},(0,l.kt)("em",{parentName:"h3"},"switch")," statement"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"If no such case is found, the default will be called.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'int a = 999;\nswitch(a){\n    case 1: \n        System.out.println("1");\n        break;\n    case 2: \n        System.out.println("2");\n        break;    \n    default: \n        System.out.println("0");\n        break;\n}\n')),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="Result"',title:'"Result"'},"0\n"))),(0,l.kt)("li",{parentName:"ol"},"A break statement ends the switch statement immediately.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'int a = 3;\nswitch(a){\n    case 1: \n        System.out.println("1");\n        break;\n    case 2: \n        System.out.println("2");\n        break;    \n    case 3: \n        System.out.println("3");\n        break;\n    default: \n        System.out.println("0");\n        break;\n}\n')),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="Result"',title:'"Result"'},"3\n"))),(0,l.kt)("li",{parentName:"ol"},"Without break statement, it will match the first case statement, and ",(0,l.kt)("strong",{parentName:"li"},"executes all of the branches")," in the order it is found!",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'int a = 3;\nswitch(a){\n    case 1: System.out.println("1");\n    case 2: System.out.println("2");    \n    case 3: System.out.println("3");\n    default: System.out.println("0");  \n    case 5: System.out.println("5");  \n    case 4: System.out.println("4");  \n}\n')),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="Result"',title:'"Result"'},"3\n0\n5\n4\n"))),(0,l.kt)("li",{parentName:"ol"},"Starting with Java 14, case value can be combined.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Prior to Java 14"',title:'"Prior',to:!0,Java:!0,'14"':!0},'int a = 2;\nswitch(a){\n    # highlight-next-line\n    case 1: case 2: \n        System.out.println(" 1 or 2 ");\n        break;\n    case 3: \n        System.out.println(" 3 ");\n        break;\n    default: \n        System.out.println(" Default ");\n        break;\n}\n')),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Starting with Java 14"',title:'"Starting',with:!0,Java:!0,'14"':!0},'int a = 2;\nswitch(a){\n    # highlight-next-line\n    case 1, 2: \n        System.out.println(" 1 or 2 ");\n        break;\n    case 3: \n        System.out.println(" 3 ");\n        break;\n    default: \n        System.out.println(" Default ");\n        break;\n}\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("em",{parentName:"li"},"switch")," supports the following data type",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"byte, short, int"),(0,l.kt)("li",{parentName:"ul"},"char, String"),(0,l.kt)("li",{parentName:"ul"},"enum values"))),(0,l.kt)("li",{parentName:"ol"},"boolean, long, float, double are not supported because of their range of values. Either too narrow or wide."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("em",{parentName:"li"},"case")," must be compile time constants. If the case value is not evaluated until runtime, it cannot be compiled."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("em",{parentName:"li"},"case")," support only",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"literals"),(0,l.kt)("li",{parentName:"ul"},"enum constants"),(0,l.kt)("li",{parentName:"ul"},"final constants")))),(0,l.kt)("h4",{id:"switch-expression-java-14"},(0,l.kt)("em",{parentName:"h4"},"switch")," expression (Java 14)"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Starting with Java 14, ",(0,l.kt)("strong",{parentName:"li"},"switch expression")," is supported.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"byte a = 2;\nbyte b = 4;\nbyte c = switch (a) {\n    case 1 -> 0; // expression\n    case 2, 3 -> { // block\n        if (b == 4) {\n            yield 10;\n        } else {\n            yield 20;\n        }\n    }\n    default -> 99;\n};\nSystem.out.println(c);\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="Result"',title:'"Result"'},"10\n"))),(0,l.kt)("li",{parentName:"ol"},"It is a compact form of switch statement."),(0,l.kt)("li",{parentName:"ol"},"It supports both ",(0,l.kt)("em",{parentName:"li"},"expression")," and ",(0,l.kt)("em",{parentName:"li"},"block"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("em",{parentName:"li"},"yield")," is provided to distinguish it from ",(0,l.kt)("em",{parentName:"li"},"return"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("em",{parentName:"li"},"break")," statement is not required. Only one branch will be executed."),(0,l.kt)("li",{parentName:"ol"},"Each case or default expression requires a semicolon as well as the assignment itself."),(0,l.kt)("li",{parentName:"ol"},"It is allowed that switch expression doesn't return value.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'byte a = 3;\nswitch(a){\n    case 1 -> System.out.println("1");\n    case 2 -> System.out.println("2");\n    case 3 -> System.out.println("3");\n    default -> System.out.println("default"); // Default case is optional in this case\n}\n'))),(0,l.kt)("li",{parentName:"ol"},"If there is return value, all of the branches must either ",(0,l.kt)("strong",{parentName:"li"},"return")," value (for expression) or ",(0,l.kt)("strong",{parentName:"li"},"yield")," a value (for block)."),(0,l.kt)("li",{parentName:"ol"},"If there is return value, all possible case values have to be covered. You can either",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Provide a default branch"),(0,l.kt)("li",{parentName:"ul"},"Or cover all possible values. Tough quite impossible unless it is a enum types."))),(0,l.kt)("li",{parentName:"ol"},"Return data type must be consistent. ")),(0,l.kt)("h3",{id:"while-statement"},(0,l.kt)("em",{parentName:"h3"},"while")," statement"),(0,l.kt)("h3",{id:"do-while-statement"},(0,l.kt)("em",{parentName:"h3"},"do while")," statement"),(0,l.kt)("h3",{id:"for-loop"},(0,l.kt)("em",{parentName:"h3"},"for")," loop"),(0,l.kt)("h3",{id:"for-each-loop"},(0,l.kt)("em",{parentName:"h3"},"for each")," loop"),(0,l.kt)("h3",{id:"branching"},"Branching"),(0,l.kt)("h4",{id:"optional-label"},(0,l.kt)("em",{parentName:"h4"},"Optional")," label"),(0,l.kt)("h4",{id:"break-statement"},(0,l.kt)("em",{parentName:"h4"},"break")," statement"),(0,l.kt)("h4",{id:"return-statement"},(0,l.kt)("em",{parentName:"h4"},"return")," statement"),(0,l.kt)("h2",{id:"core-apis"},"Core APIs"),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h2",{id:"class-design"},"Class Design"),(0,l.kt)("h2",{id:"beyond-classes"},"Beyond Classes"),(0,l.kt)("h2",{id:"lambdas-and-functional-interfaces"},"Lambdas And Functional Interfaces"))}c.isMDXComponent=!0}}]);